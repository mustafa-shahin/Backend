@using Backend.CMS.Web.Services
@inject INotificationService NotificationService
@implements IDisposable

<div class="fixed top-4 right-4 z-50 space-y-3 w-80">
    @foreach (var notification in notifications.Take(5))
    {
        <div class="@GetNotificationClasses(notification.Type) animate-slide-in" @key="notification.Id">
            <div class="flex items-start">
                <div class="flex-shrink-0">
                    <div class="@GetIconContainerClasses(notification.Type)">
                        <i class="@GetNotificationIcon(notification.Type)"></i>
                    </div>
                </div>

                <div class="ml-3 flex-1 pt-0.5">
                    <p class="text-sm font-medium @GetTitleClasses(notification.Type)">
                        @notification.Title
                    </p>
                    <p class="mt-1 text-sm @GetMessageClasses(notification.Type)">
                        @notification.Message
                    </p>

                    @if (!string.IsNullOrEmpty(notification.ActionText) && notification.ActionCallback != null)
                    {
                        <div class="mt-3">
                            <button @onclick="() => HandleActionClick(notification)"
                                    class="@GetActionButtonClasses(notification.Type)">
                                @notification.ActionText
                            </button>
                        </div>
                    }
                </div>

                <div class="ml-4 flex-shrink-0 flex">
                    <button @onclick="() => RemoveNotification(notification.Id)"
                            class="@GetCloseButtonClasses(notification.Type)">
                        <i class="fas fa-times"></i>
                        <span class="sr-only">Close</span>
                    </button>
                </div>
            </div>

            <!-- Progress bar for auto-close -->
            @if (notification.AutoClose && notification.DurationMs > 0)
            {
                <div class="mt-2 w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1">
                    <div class="@GetProgressBarClasses(notification.Type) h-1 rounded-full animate-progress"
                         style="animation-duration: @(notification.DurationMs)ms"></div>
                </div>
            }
        </div>
    }

    @if (notifications.Count > 5)
    {
        <div class="bg-gray-800 dark:bg-gray-900 text-white rounded-lg shadow-lg p-4 text-center">
            <p class="text-sm">
                +@(notifications.Count - 5) more notification@(notifications.Count - 5 == 1 ? "" : "s")
            </p>
            <button @onclick="ClearAllNotifications"
                    class="mt-2 text-xs text-gray-300 hover:text-white underline">
                Clear all
            </button>
        </div>
    }
</div>

@code {
    private List<NotificationMessage> notifications = new();

    protected override void OnInitialized()
    {
        NotificationService.NotificationAdded += OnNotificationAdded;
        NotificationService.NotificationRemoved += OnNotificationRemoved;

        // Load existing notifications
        notifications = NotificationService.GetActiveNotifications();
    }

    private void OnNotificationAdded(NotificationMessage notification)
    {
        notifications.Insert(0, notification);
        InvokeAsync(StateHasChanged);
    }

    private void OnNotificationRemoved(string id)
    {
        notifications.RemoveAll(n => n.Id == id);
        InvokeAsync(StateHasChanged);
    }

    private async Task RemoveNotification(string id)
    {
        await NotificationService.RemoveNotificationAsync(id);
    }

    private async Task ClearAllNotifications()
    {
        await NotificationService.ClearAllNotificationsAsync();
    }

    private async Task HandleActionClick(NotificationMessage notification)
    {
        try
        {
            if (notification.ActionCallback != null)
            {
                await notification.ActionCallback.Invoke();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync("Action failed", ex.Message);
        }
        finally
        {
            await RemoveNotification(notification.Id);
        }
    }

    private string GetNotificationClasses(NotificationType type)
    {
        var baseClasses = "bg-white dark:bg-gray-800 rounded-lg shadow-lg border p-4 pointer-events-auto";

        var borderClasses = type switch
        {
            NotificationType.Success => "border-green-200 dark:border-green-800",
            NotificationType.Error => "border-red-200 dark:border-red-800",
            NotificationType.Warning => "border-yellow-200 dark:border-yellow-800",
            NotificationType.Info => "border-blue-200 dark:border-blue-800",
            _ => "border-gray-200 dark:border-gray-700"
        };

        return $"{baseClasses} {borderClasses}";
    }

    private string GetIconContainerClasses(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "w-5 h-5 text-green-400",
            NotificationType.Error => "w-5 h-5 text-red-400",
            NotificationType.Warning => "w-5 h-5 text-yellow-400",
            NotificationType.Info => "w-5 h-5 text-blue-400",
            _ => "w-5 h-5 text-gray-400"
        };
    }

    private string GetNotificationIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "fas fa-check-circle",
            NotificationType.Error => "fas fa-exclamation-circle",
            NotificationType.Warning => "fas fa-exclamation-triangle",
            NotificationType.Info => "fas fa-info-circle",
            _ => "fas fa-bell"
        };
    }

    private string GetTitleClasses(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-800 dark:text-green-200",
            NotificationType.Error => "text-red-800 dark:text-red-200",
            NotificationType.Warning => "text-yellow-800 dark:text-yellow-200",
            NotificationType.Info => "text-blue-800 dark:text-blue-200",
            _ => "text-gray-800 dark:text-gray-200"
        };
    }

    private string GetMessageClasses(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-700 dark:text-green-300",
            NotificationType.Error => "text-red-700 dark:text-red-300",
            NotificationType.Warning => "text-yellow-700 dark:text-yellow-300",
            NotificationType.Info => "text-blue-700 dark:text-blue-300",
            _ => "text-gray-700 dark:text-gray-300"
        };
    }

    private string GetCloseButtonClasses(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-400 hover:text-green-600 dark:text-green-300 dark:hover:text-green-100",
            NotificationType.Error => "text-red-400 hover:text-red-600 dark:text-red-300 dark:hover:text-red-100",
            NotificationType.Warning => "text-yellow-400 hover:text-yellow-600 dark:text-yellow-300 dark:hover:text-yellow-100",
            NotificationType.Info => "text-blue-400 hover:text-blue-600 dark:text-blue-300 dark:hover:text-blue-100",
            _ => "text-gray-400 hover:text-gray-600 dark:text-gray-300 dark:hover:text-gray-100"
        } + " focus:outline-none focus:ring-2 focus:ring-offset-2 rounded-md p-1 transition-colors";
    }

    private string GetActionButtonClasses(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300",
            NotificationType.Error => "text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300",
            NotificationType.Warning => "text-yellow-600 hover:text-yellow-500 dark:text-yellow-400 dark:hover:text-yellow-300",
            NotificationType.Info => "text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300",
            _ => "text-gray-600 hover:text-gray-500 dark:text-gray-400 dark:hover:text-gray-300"
        } + " text-sm font-medium underline focus:outline-none focus:ring-2 focus:ring-offset-2 rounded transition-colors";
    }

    private string GetProgressBarClasses(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "bg-green-500",
            NotificationType.Error => "bg-red-500",
            NotificationType.Warning => "bg-yellow-500",
            NotificationType.Info => "bg-blue-500",
            _ => "bg-gray-500"
        };
    }

    public void Dispose()
    {
        NotificationService.NotificationAdded -= OnNotificationAdded;
        NotificationService.NotificationRemoved -= OnNotificationRemoved;
    }
}

<style>
    @@keyframes slide-in {
        from{
        transform: translateX(100%);
        opacity: 0;
    }

    to{
        transform: translateX(0);
        opacity: 1;
    }

    }

    @@keyframes progress {
        from{
        width: 100%;
    }

    to {
        width: 0%;
    }

    }

    .animate-slide-in {
        animation: slide-in 0.3s ease-out;
    }

    .animate-progress {
        animation: progress linear;
    }
</style>