<div class="@GetCardClasses()">
    <div class="p-6">
        <div class="flex items-center">
            <div class="flex-shrink-0">
                <div class="@GetIconContainerClasses()">
                    @if (IsLoading)
                    {
                        <i class="fas fa-spinner fa-spin @IconColor"></i>
                    }
                    else
                    {
                        <i class="@Icon @IconColor"></i>
                    }
                </div>
            </div>
            <div class="ml-5 w-0 flex-1">
                <dl>
                    <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                        @Title
                    </dt>
                    <dd class="flex items-baseline">
                        @if (IsLoading)
                        {
                            <div class="animate-pulse">
                                <div class="h-8 bg-gray-200 dark:bg-gray-700 rounded w-16"></div>
                            </div>
                        }
                        else
                        {
                            <div class="text-2xl font-semibold text-gray-900 dark:text-white">
                                @FormatValue(Value)
                            </div>
                            @if (Change.HasValue)
                            {
                                <p class="@GetChangeClasses()">
                                    <i class="@GetChangeIcon() mr-1"></i>
                                    @FormatChange(Change.Value)
                                </p>
                            }
                        }
                    </dd>
                </dl>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Description))
        {
            <div class="mt-4">
                <p class="text-sm text-gray-600 dark:text-gray-400">
                    @Description
                </p>
            </div>
        }

        @if (ActionText != null && OnActionClick.HasDelegate)
        {
            <div class="mt-4">
                <button @onclick="HandleActionClick"
                        disabled="@IsLoading"
                        class="@GetActionButtonClasses()">
                    @if (!string.IsNullOrEmpty(ActionIcon))
                    {
                        <i class="@ActionIcon mr-2"></i>
                    }
                    @ActionText
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public object Value { get; set; } = 0;
    [Parameter] public string Icon { get; set; } = "fas fa-chart-line";
    [Parameter] public string IconColor { get; set; } = "text-blue-600";
    [Parameter] public string BackgroundColor { get; set; } = "bg-blue-50 dark:bg-blue-900/20";
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public string? Description { get; set; }
    [Parameter] public double? Change { get; set; }
    [Parameter] public string? ActionText { get; set; }
    [Parameter] public string? ActionIcon { get; set; }
    [Parameter] public EventCallback OnActionClick { get; set; }
    [Parameter] public string? CssClass { get; set; }

    private async Task HandleActionClick()
    {
        if (!IsLoading && OnActionClick.HasDelegate)
        {
            await OnActionClick.InvokeAsync();
        }
    }

    private string GetCardClasses()
    {
        var baseClasses = "bg-white dark:bg-gray-800 overflow-hidden shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow";
        return $"{baseClasses} {CssClass}".Trim();
    }

    private string GetIconContainerClasses()
    {
        return $"w-8 h-8 {BackgroundColor} rounded-md flex items-center justify-center";
    }

    private string GetChangeClasses()
    {
        if (!Change.HasValue) return string.Empty;

        var baseClasses = "ml-2 flex items-baseline text-sm font-semibold";
        var colorClasses = Change.Value >= 0 ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400";

        return $"{baseClasses} {colorClasses}";
    }

    private string GetChangeIcon()
    {
        if (!Change.HasValue) return string.Empty;
        return Change.Value >= 0 ? "fas fa-arrow-up" : "fas fa-arrow-down";
    }

    private string GetActionButtonClasses()
    {
        return "inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors";
    }

    private string FormatValue(object value)
    {
        return value switch
        {
            int intValue => intValue.ToString("N0"),
            long longValue => longValue.ToString("N0"),
            double doubleValue => doubleValue.ToString("N0"),
            decimal decimalValue => decimalValue.ToString("N0"),
            _ => value?.ToString() ?? "0"
        };
    }

    private string FormatChange(double change)
    {
        var absChange = Math.Abs(change);
        return $"{absChange:F1}%";
    }
}