@using Backend.CMS.Web.Services
@inject IDialogService DialogService
@implements IDisposable

@foreach (var dialog in dialogs)
{
    <GenericDialog Title="@dialog.Options.Title"
                   Size="@dialog.Options.Size"
                   CloseOnBackdropClick="@dialog.Options.CloseOnBackdropClick"
                   ShowCloseButton="@dialog.Options.ShowCloseButton"
                   ShowHeader="@dialog.Options.ShowHeader"
                   ShowFooter="@dialog.Options.ShowFooter"
                   CssClass="@dialog.Options.CssClass"
                   OnClose="() => CloseDialog(dialog.Id)"
                   @key="dialog.Id">

        @RenderDialogContent(dialog)

    </GenericDialog>
}

@code {
    private List<DialogReference> dialogs = new();

    protected override void OnInitialized()
    {
        DialogService.DialogsChanged += OnDialogsChanged;
        dialogs = DialogService.GetActiveDialogs();
    }

    private void OnDialogsChanged()
    {
        dialogs = DialogService.GetActiveDialogs();
        InvokeAsync(StateHasChanged);
    }

    private async Task CloseDialog(string dialogId)
    {
        await DialogService.CloseAsync(dialogId);
    }

    private RenderFragment RenderDialogContent(DialogReference dialog)
    {
        return builder =>
        {
            var componentType = dialog.ComponentType;
            var parameters = dialog.Options.Parameters ?? new Dictionary<string, object>();

            // Add the dialog reference to parameters so components can close themselves
            parameters["DialogId"] = dialog.Id;

            builder.OpenComponent(0, componentType);

            var index = 1;
            foreach (var parameter in parameters)
            {
                builder.AddAttribute(index++, parameter.Key, parameter.Value);
            }

            builder.CloseComponent();
        };
    }

    public void Dispose()
    {
        DialogService.DialogsChanged -= OnDialogsChanged;
    }
}