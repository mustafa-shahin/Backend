@using Backend.CMS.Web.Services
@typeparam TModel
@inject INotificationService NotificationService

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" class="@FormClasses">
    <DataAnnotationsValidator />

    @if (ShowTitle && !string.IsNullOrEmpty(Title))
    {
        <div class="mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">@Title</h2>
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">@Description</p>
            }
        </div>
    }

    @if (ErrorMessage != null)
    {
        <div class="mb-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-triangle text-red-400"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-800 dark:text-red-200">@ErrorMessage</p>
                </div>
            </div>
        </div>
    }

    <div class="@GetFieldsContainerClasses()">
        @FieldsContent
    </div>

    @if (ShowButtons)
    {
        <div class="@GetButtonsContainerClasses()">
            @if (ShowCancelButton)
            {
                <button type="button"
                        @onclick="HandleCancel"
                        disabled="@IsLoading"
                        class="@GetCancelButtonClasses()">
                    <i class="fas fa-times mr-2"></i>
                    @CancelText
                </button>
            }

            <button type="submit"
                    disabled="@(IsLoading || IsSubmitDisabled)"
                    class="@GetSubmitButtonClasses()">
                <i class="@GetSubmitIcon() mr-2"></i>
                @GetSubmitText()
            </button>

            @if (AdditionalButtons != null)
            {
                @AdditionalButtons
            }
        </div>
    }
</EditForm>

@code {
    [Parameter] public TModel Model { get; set; } = default!;
    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public RenderFragment FieldsContent { get; set; } = default!;
    [Parameter] public RenderFragment? AdditionalButtons { get; set; }

    // Configuration
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public string SubmitText { get; set; } = "Save";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string LoadingText { get; set; } = "Saving...";
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool IsSubmitDisabled { get; set; } = false;
    [Parameter] public string? ErrorMessage { get; set; }

    // Layout options
    [Parameter] public bool ShowTitle { get; set; } = true;
    [Parameter] public bool ShowButtons { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public FormLayout Layout { get; set; } = FormLayout.Vertical;
    [Parameter] public string? CssClass { get; set; }

    // Events
    [Parameter] public EventCallback<TModel> ModelChanged { get; set; }

    private string FormClasses => $"space-y-6 {CssClass}".Trim();

    private async Task HandleValidSubmit()
    {
        if (IsLoading) return;

        try
        {
            await OnSubmit.InvokeAsync(Model);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync("An error occurred while saving", ex.Message);
        }
    }

    private async Task HandleCancel()
    {
        if (IsLoading) return;
        await OnCancel.InvokeAsync();
    }

    private string GetFieldsContainerClasses()
    {
        return Layout switch
        {
            FormLayout.Horizontal => "grid grid-cols-1 md:grid-cols-2 gap-6",
            FormLayout.Compact => "space-y-4",
            FormLayout.Vertical => "space-y-6",
            _ => "space-y-6"
        };
    }

    private string GetButtonsContainerClasses()
    {
        var baseClasses = "flex gap-3 pt-6 border-t border-gray-200 dark:border-gray-700";
        return Layout switch
        {
            FormLayout.Horizontal => $"{baseClasses} justify-end",
            FormLayout.Compact => $"{baseClasses} justify-end",
            FormLayout.Vertical => $"{baseClasses} justify-end",
            _ => $"{baseClasses} justify-end"
        };
    }

    private string GetSubmitButtonClasses()
    {
        var baseClasses = "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed";
        var colorClasses = "text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500";
        return $"{baseClasses} {colorClasses}";
    }

    private string GetCancelButtonClasses()
    {
        var baseClasses = "inline-flex items-center px-4 py-2 border text-sm font-medium rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed";
        var colorClasses = "border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:ring-blue-500";
        return $"{baseClasses} {colorClasses}";
    }

    private string GetSubmitIcon()
    {
        return IsLoading ? "fas fa-spinner fa-spin" : "fas fa-save";
    }

    private string GetSubmitText()
    {
        return IsLoading ? LoadingText : SubmitText;
    }

    public enum FormLayout
    {
        Vertical,
        Horizontal,
        Compact
    }
}