@typeparam TItem

<div class="@GetContainerClasses()">
    <!-- Header -->
    @if (ShowHeader)
    {
        <div class="@GetHeaderClasses()">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                <!-- Title and Description -->
                <div>
                    @if (!string.IsNullOrEmpty(Title))
                    {
                        <h2 class="text-lg font-semibold text-gray-900 dark:text-white">@Title</h2>
                    }
                    @if (!string.IsNullOrEmpty(Description))
                    {
                        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">@Description</p>
                    }
                </div>

                <!-- Actions -->
                <div class="flex items-center space-x-3">
                    @if (HeaderActions != null)
                    {
                        @HeaderActions
                    }
                    
                    @if (ShowAddButton)
                    {
                        <button @onclick="HandleAdd"
                                type="button"
                                class="@GetAddButtonClasses()">
                            <i class="fas fa-plus mr-2"></i>
                            @AddButtonText
                        </button>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Filters and Search -->
    @if (ShowFilters || ShowSearch)
    {
        <div class="@GetFiltersClasses()">
            @if (ShowSearch)
            {
                <div class="flex-1 max-w-md">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                        <input @bind="SearchQuery"
                               @bind:event="oninput"
                               @onkeypress="HandleSearchKeyPress"
                               type="text"
                               placeholder="@SearchPlaceholder"
                               class="block w-full pl-10 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors sm:text-sm" />
                        @if (!string.IsNullOrEmpty(SearchQuery))
                        {
                            <button @onclick="ClearSearch"
                                    type="button"
                                    class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                                <i class="fas fa-times"></i>
                            </button>
                        }
                    </div>
                </div>
            }

            @if (FiltersContent != null)
            {
                <div class="flex items-center space-x-3">
                    @FiltersContent
                </div>
            }
        </div>
    }

    <!-- Loading State -->
    @if (IsLoading)
    {
        <div class="@GetLoadingClasses()">
            <div class="flex items-center justify-center py-12">
                <div class="flex items-center space-x-3">
                    <i class="fas fa-spinner fa-spin text-blue-600 text-xl"></i>
                    <span class="text-gray-600 dark:text-gray-400">@LoadingText</span>
                </div>
            </div>
        </div>
    }
    else if (Items?.Any() == true)
    {
        <!-- Table -->
        <div class="@GetTableContainerClasses()">
            <table class="@GetTableClasses()">
                <!-- Header -->
                <thead class="@GetTableHeaderClasses()">
                    <tr>
                        @if (ShowSelectAll)
                        {
                            <th scope="col" class="@GetSelectColumnClasses()">
                                <input type="checkbox"
                                       @onchange="HandleSelectAll"
                                       checked="@IsAllSelected"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                            </th>
                        }
                        
                        @if (Columns != null)
                        {
                            @Columns
                        }
                        
                        @if (ShowActions)
                        {
                            <th scope="col" class="@GetActionsColumnClasses()">
                                <span class="sr-only">Actions</span>
                            </th>
                        }
                    </tr>
                </thead>

                <!-- Body -->
                <tbody class="@GetTableBodyClasses()">
                    @{
                        var index = 0;
                    }
                    @foreach (var item in Items)
                    {
                        <tr class="@GetRowClasses(index)" @key="@GetItemKey(item)">
                            @if (ShowSelectAll)
                            {
                                <td class="@GetSelectCellClasses()">
                                    <input type="checkbox"
                                           @onchange="@(e => HandleSelectItem(item, (bool)e.Value!))"
                                           checked="@IsItemSelected(item)"
                                           class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                </td>
                            }
                            
                            @if (RowTemplate != null)
                            {
                                @RowTemplate(item)
                            }
                            
                            @if (ShowActions)
                            {
                                <td class="@GetActionsCellClasses()">
                                    <div class="flex items-center justify-end space-x-2">
                                        @if (ItemActions != null)
                                        {
                                            @ItemActions(item)
                                        }
                                        else
                                        {
                                            <!-- Default Actions -->
                                            @if (ShowEditAction)
                                            {
                                                <button @onclick="() => HandleEdit(item)"
                                                        type="button"
                                                        class="@GetEditButtonClasses()"
                                                        title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            }
                                            
                                            @if (ShowDeleteAction)
                                            {
                                                <button @onclick="() => HandleDelete(item)"
                                                        type="button"
                                                        class="@GetDeleteButtonClasses()"
                                                        title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                        index++;
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        @if (ShowPagination && TotalPages > 1)
        {
            <div class="@GetPaginationClasses()">
                <div class="flex items-center justify-between">
                    <!-- Results Info -->
                    <div class="text-sm text-gray-700 dark:text-gray-300">
                        Showing <span class="font-medium">@GetStartIndex()</span> to <span class="font-medium">@GetEndIndex()</span> of <span class="font-medium">@TotalItems</span> results
                    </div>

                    <!-- Pagination Controls -->
                    <div class="flex items-center space-x-2">
                        <button @onclick="() => ChangePage(CurrentPage - 1)"
                                disabled="@(CurrentPage <= 1)"
                                class="@GetPaginationButtonClasses()">
                            <i class="fas fa-chevron-left"></i>
                        </button>

                        @foreach (var page in GetVisiblePages())
                        {
                            <button @onclick="() => ChangePage(page)"
                                    class="@GetPageButtonClasses(page)">
                                @(page)
                            </button>
                        }

                        <button @onclick="() => ChangePage(CurrentPage + 1)"
                                disabled="@(CurrentPage >= TotalPages)"
                                class="@GetPaginationButtonClasses()">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <!-- Empty State -->
        <div class="@GetEmptyStateClasses()">
            <div class="text-center py-12">
                <i class="@GetEmptyIcon() text-4xl text-gray-300 dark:text-gray-600 mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">@EmptyTitle</h3>
                <p class="text-gray-500 dark:text-gray-400 mb-6">@EmptyDescription</p>
                @if (ShowAddButton && !string.IsNullOrEmpty(SearchQuery))
                {
                    <button @onclick="ClearSearch"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-blue-600 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        <i class="fas fa-times mr-2"></i>
                        Clear search
                    </button>
                }
                else if (ShowAddButton)
                {
                    <button @onclick="HandleAdd"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        <i class="fas fa-plus mr-2"></i>
                        @AddButtonText
                    </button>
                }
            </div>
        </div>
    }

    <!-- Selected Items Actions -->
    @if (ShowSelectAll && SelectedItems.Any())
    {
        <div class="@GetSelectedActionsClasses()">
            <div class="flex items-center justify-between">
                <span class="text-sm text-gray-700 dark:text-gray-300">
                    @SelectedItems.Count item(s) selected
                </span>
                <div class="flex items-center space-x-3">
                    @if (BulkActions != null)
                    {
                        @BulkActions(SelectedItems.ToList())
                    }
                    <button @onclick="ClearSelection"
                            class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                        Clear selection
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public RenderFragment? Columns { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? ItemActions { get; set; }
    [Parameter] public RenderFragment? HeaderActions { get; set; }
    [Parameter] public RenderFragment? FiltersContent { get; set; }
    [Parameter] public RenderFragment<List<TItem>>? BulkActions { get; set; }
    
    // Configuration
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Description { get; set; } = string.Empty;
    [Parameter] public string LoadingText { get; set; } = "Loading...";
    [Parameter] public string EmptyTitle { get; set; } = "No items found";
    [Parameter] public string EmptyDescription { get; set; } = "Get started by creating your first item.";
    [Parameter] public string EmptyIcon { get; set; } = "fas fa-inbox";
    [Parameter] public string AddButtonText { get; set; } = "Add New";
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    
    // State
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public bool ShowFilters { get; set; } = false;
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowEditAction { get; set; } = true;
    [Parameter] public bool ShowDeleteAction { get; set; } = true;
    [Parameter] public bool ShowAddButton { get; set; } = true;
    [Parameter] public bool ShowSelectAll { get; set; } = false;
    [Parameter] public bool ShowPagination { get; set; } = true;
    
    // Pagination
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int TotalItems { get; set; } = 0;
    public int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);
    
    // Events
    [Parameter] public EventCallback<TItem> OnEdit { get; set; }
    [Parameter] public EventCallback<TItem> OnDelete { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    
    // Key selector
    [Parameter] public Func<TItem, object> KeySelector { get; set; } = item => item?.GetHashCode() ?? 0;
    
    [Parameter] public string CssClass { get; set; } = string.Empty;

    private string SearchQuery { get; set; } = string.Empty;
    private readonly HashSet<TItem> SelectedItems = new();
    private bool IsAllSelected => Items.Any() && Items.All(SelectedItems.Contains);

    private async Task HandleAdd()
    {
        await OnAdd.InvokeAsync();
    }

    private async Task HandleEdit(TItem item)
    {
        await OnEdit.InvokeAsync(item);
    }

    private async Task HandleDelete(TItem item)
    {
        await OnDelete.InvokeAsync(item);
    }

    private async Task HandleSearch()
    {
        await OnSearch.InvokeAsync(SearchQuery);
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSearch();
        }
    }

    private async Task ClearSearch()
    {
        SearchQuery = string.Empty;
        await HandleSearch();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= TotalPages && page != CurrentPage)
        {
            await OnPageChanged.InvokeAsync(page);
        }
    }

    private void HandleSelectAll(ChangeEventArgs e)
    {
        if ((bool)e.Value!)
        {
            foreach (var item in Items)
            {
                SelectedItems.Add(item);
            }
        }
        else
        {
            SelectedItems.Clear();
        }
    }

    private void HandleSelectItem(TItem item, bool selected)
    {
        if (selected)
        {
            SelectedItems.Add(item);
        }
        else
        {
            SelectedItems.Remove(item);
        }
    }

    private bool IsItemSelected(TItem item)
    {
        return SelectedItems.Contains(item);
    }

    private void ClearSelection()
    {
        SelectedItems.Clear();
    }

    private object GetItemKey(TItem item)
    {
        return KeySelector(item);
    }

    private List<int> GetVisiblePages()
    {
        var pages = new List<int>();
        var start = Math.Max(1, CurrentPage - 2);
        var end = Math.Min(TotalPages, CurrentPage + 2);

        for (int i = start; i <= end; i++)
        {
            pages.Add(i);
        }

        return pages;
    }

    private int GetStartIndex()
    {
        return (CurrentPage - 1) * PageSize + 1;
    }

    private int GetEndIndex()
    {
        return Math.Min(CurrentPage * PageSize, TotalItems);
    }

    #region CSS Classes

    private string GetContainerClasses()
    {
        return $"bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 {CssClass}".Trim();
    }

    private string GetHeaderClasses()
    {
        return "px-6 py-4 border-b border-gray-200 dark:border-gray-700";
    }

    private string GetFiltersClasses()
    {
        return "px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4";
    }

    private string GetLoadingClasses()
    {
        return "px-6";
    }

    private string GetTableContainerClasses()
    {
        return "overflow-x-auto";
    }

    private string GetTableClasses()
    {
        return "min-w-full divide-y divide-gray-200 dark:divide-gray-700";
    }

    private string GetTableHeaderClasses()
    {
        return "bg-gray-50 dark:bg-gray-900";
    }

    private string GetTableBodyClasses()
    {
        return "bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700";
    }

    private string GetRowClasses(int index)
    {
        return "hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors";
    }

    private string GetSelectColumnClasses()
    {
        return "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-12";
    }

    private string GetActionsColumnClasses()
    {
        return "px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-32";
    }

    private string GetSelectCellClasses()
    {
        return "px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white";
    }

    private string GetActionsCellClasses()
    {
        return "px-6 py-4 whitespace-nowrap text-right text-sm font-medium";
    }

    private string GetAddButtonClasses()
    {
        return "inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors";
    }

    private string GetEditButtonClasses()
    {
        return "text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 p-1 transition-colors";
    }

    private string GetDeleteButtonClasses()
    {
        return "text-red-600 hover:text-red-500 dark:text-red-400 dark:hover:text-red-300 p-1 transition-colors";
    }

    private string GetEmptyStateClasses()
    {
        return "px-6";
    }

    private string GetEmptyIcon()
    {
        return EmptyIcon;
    }

    private string GetPaginationClasses()
    {
        return "px-6 py-4 border-t border-gray-200 dark:border-gray-700";
    }

    private string GetPaginationButtonClasses()
    {
        return "relative inline-flex items-center px-2 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 focus:z-10 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors rounded-md";
    }

    private string GetPageButtonClasses(int page)
    {
        var baseClasses = "relative inline-flex items-center px-4 py-2 border text-sm font-medium focus:z-10 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 transition-colors rounded-md";
        
        if (page == CurrentPage)
        {
            return $"{baseClasses} border-blue-500 bg-blue-50 dark:bg-blue-900 text-blue-600 dark:text-blue-400";
        }
        else
        {
            return $"{baseClasses} border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700";
        }
    }

    private string GetSelectedActionsClasses()
    {
        return "px-6 py-3 bg-blue-50 dark:bg-blue-900/20 border-t border-gray-200 dark:border-gray-700";
    }

    #endregion
}