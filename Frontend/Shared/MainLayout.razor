@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime
@inject IThemeService ThemeService
@inject NavigationManager Navigation

<div class="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
    <!-- Check if this is the login page -->
    @if (isLoginPage)
    {
        @Body
    }
    else
    {
        <!-- Dashboard Layout -->
        <div class="flex h-screen overflow-hidden">
            <!-- Sidebar -->
            <Sidebar @ref="sidebar" />

            <!-- Main Content Area -->
            <div class="flex-1 flex flex-col overflow-hidden">
                <!-- Top Header -->
                <TopBar OnToggleSidebar="ToggleSidebar" />

                <!-- Main Content -->
                <main class="flex-1 overflow-auto bg-gray-50 dark:bg-gray-900">
                    <div class="p-6">
                        <Frontend.Components.Common.ErrorBoundary>
                            @Body
                        </Frontend.Components.Common.ErrorBoundary>
                    </div>
                </main>
            </div>
        </div>
    }

    <!-- Notification Container -->
    <NotificationContainer />
</div>

@code {
    private Sidebar? sidebar;
    private bool isLoginPage = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "MainLayout loaded");

            // Check if current page is login page
            await CheckIfLoginPage();

            // Listen for theme changes
            ThemeService.ThemeChanged += OnThemeChanged;

            // Listen for navigation changes
            Navigation.LocationChanged += OnLocationChanged;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"MainLayout error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Apply initial theme
                await ApplyTheme();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Theme application error: {ex.Message}");
            }
        }
    }

    private async Task CheckIfLoginPage()
    {
        try
        {
            var currentPath = await JSRuntime.InvokeAsync<string>("eval", "window.location.pathname");
            isLoginPage = currentPath?.Equals("/login", StringComparison.OrdinalIgnoreCase) == true;
        }
        catch
        {
            // Fallback: check the current URI
            var uri = new Uri(Navigation.Uri);
            isLoginPage = uri.AbsolutePath.Equals("/login", StringComparison.OrdinalIgnoreCase);
        }
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await CheckIfLoginPage();
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleSidebar()
    {
        sidebar?.Toggle();
    }

    private async void OnThemeChanged()
    {
        await ApplyTheme();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ApplyTheme()
    {
        try
        {
            if (ThemeService.IsDarkMode)
            {
                await JSRuntime.InvokeVoidAsync("document.documentElement.classList.add", "dark");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("document.documentElement.classList.remove", "dark");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error applying theme: {ex.Message}");
        }
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }
}