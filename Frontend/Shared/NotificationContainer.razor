
@inject INotificationService NotificationService
@implements IDisposable

<div class="fixed top-4 right-4 z-50 space-y-3 max-w-sm">
    @foreach (var notification in notifications)
    {
        <div class="@GetNotificationClass(notification.Type) animate-slide-down transform transition-all duration-300"
             style="animation-delay: @(notifications.IndexOf(notification) * 100)ms">
            <div class="flex items-start p-4">
                <div class="flex-shrink-0 pt-0.5">
                    <div class="@GetIconContainerClass(notification.Type)">
                        <i class="@GetNotificationIcon(notification.Type)"></i>
                    </div>
                </div>
                <div class="ml-3 flex-1 min-w-0">
                    <h4 class="@GetTitleClass(notification.Type) font-medium text-sm">
                        @notification.Title
                    </h4>
                    <p class="@GetMessageClass(notification.Type) text-sm mt-1 break-words">
                        @notification.Message
                    </p>
                    @if (notification.DurationMs > 0 && notification.AutoClose)
                    {
                        <div class="mt-2">
                            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1">
                                <div class="@GetProgressBarClass(notification.Type) h-1 rounded-full transition-all duration-100 ease-linear"
                                     style="animation: progress @(notification.DurationMs)ms linear forwards;"></div>
                            </div>
                        </div>
                    }
                </div>
                <div class="ml-4 flex-shrink-0">
                    <button @onclick="() => RemoveNotification(notification.Id)"
                            class="@GetCloseButtonClass(notification.Type) hover:opacity-75 transition-opacity p-1 rounded"
                            aria-label="Close notification">
                        <i class="fas fa-times text-sm"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- CSS for progress bar animation -->
<style>
    @@keyframes progress {
        from{
        width: 100%;
    }
    to{
        width: 0%;
    }
    }
</style>

@code {
    private List<NotificationMessage> notifications = new();
    private Dictionary<string, Timer> timers = new();

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationAdded += AddNotification;
        NotificationService.OnNotificationRemoved += RemoveNotification;
    }

    private void AddNotification(NotificationMessage notification)
    {
        // Limit to maximum 5 notifications
        if (notifications.Count >= 5)
        {
            var oldestNotification = notifications.FirstOrDefault();
            if (oldestNotification != null)
            {
                RemoveNotification(oldestNotification.Id);
            }
        }

        notifications.Add(notification);
        InvokeAsync(StateHasChanged);

        if (notification.AutoClose && notification.DurationMs > 0)
        {
            var timer = new Timer(_ => RemoveNotification(notification.Id), null, notification.DurationMs, Timeout.Infinite);
            timers[notification.Id] = timer;
        }
    }

    private void RemoveNotification(string id)
    {
        if (id == "*")
        {
            notifications.Clear();
            foreach (var timer in timers.Values)
            {
                timer.Dispose();
            }
            timers.Clear();
        }
        else
        {
            notifications.RemoveAll(n => n.Id == id);
            if (timers.TryGetValue(id, out var timer))
            {
                timer.Dispose();
                timers.Remove(id);
            }
        }

        InvokeAsync(StateHasChanged);
    }

    private string GetNotificationClass(NotificationType type)
    {
        var baseClass = "rounded-xl p-0 shadow-lg border backdrop-blur-sm max-w-sm";

        return type switch
        {
            NotificationType.Success => $"{baseClass} bg-green-50/95 dark:bg-green-900/90 border-green-200 dark:border-green-800",
            NotificationType.Error => $"{baseClass} bg-red-50/95 dark:bg-red-900/90 border-red-200 dark:border-red-800",
            NotificationType.Warning => $"{baseClass} bg-yellow-50/95 dark:bg-yellow-900/90 border-yellow-200 dark:border-yellow-800",
            NotificationType.Info => $"{baseClass} bg-blue-50/95 dark:bg-blue-900/90 border-blue-200 dark:border-blue-800",
            _ => $"{baseClass} bg-gray-50/95 dark:bg-gray-900/90 border-gray-200 dark:border-gray-800"
        };
    }

    private string GetIconContainerClass(NotificationType type)
    {
        var baseClass = "w-8 h-8 rounded-full flex items-center justify-center";

        return type switch
        {
            NotificationType.Success => $"{baseClass} bg-green-100 dark:bg-green-800",
            NotificationType.Error => $"{baseClass} bg-red-100 dark:bg-red-800",
            NotificationType.Warning => $"{baseClass} bg-yellow-100 dark:bg-yellow-800",
            NotificationType.Info => $"{baseClass} bg-blue-100 dark:bg-blue-800",
            _ => $"{baseClass} bg-gray-100 dark:bg-gray-800"
        };
    }

    private string GetNotificationIcon(NotificationType type)
    {
        var baseClass = "w-4 h-4";

        return type switch
        {
            NotificationType.Success => $"{baseClass} text-green-600 dark:text-green-300 fas fa-check",
            NotificationType.Error => $"{baseClass} text-red-600 dark:text-red-300 fas fa-exclamation-circle",
            NotificationType.Warning => $"{baseClass} text-yellow-600 dark:text-yellow-300 fas fa-exclamation-triangle",
            NotificationType.Info => $"{baseClass} text-blue-600 dark:text-blue-300 fas fa-info-circle",
            _ => $"{baseClass} text-gray-600 dark:text-gray-300 fas fa-bell"
        };
    }

    private string GetTitleClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-800 dark:text-green-200",
            NotificationType.Error => "text-red-800 dark:text-red-200",
            NotificationType.Warning => "text-yellow-800 dark:text-yellow-200",
            NotificationType.Info => "text-blue-800 dark:text-blue-200",
            _ => "text-gray-800 dark:text-gray-200"
        };
    }

    private string GetMessageClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-700 dark:text-green-300",
            NotificationType.Error => "text-red-700 dark:text-red-300",
            NotificationType.Warning => "text-yellow-700 dark:text-yellow-300",
            NotificationType.Info => "text-blue-700 dark:text-blue-300",
            _ => "text-gray-700 dark:text-gray-300"
        };
    }

    private string GetCloseButtonClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "text-green-600 dark:text-green-400 hover:bg-green-100 dark:hover:bg-green-800",
            NotificationType.Error => "text-red-600 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-800",
            NotificationType.Warning => "text-yellow-600 dark:text-yellow-400 hover:bg-yellow-100 dark:hover:bg-yellow-800",
            NotificationType.Info => "text-blue-600 dark:text-blue-400 hover:bg-blue-100 dark:hover:bg-blue-800",
            _ => "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800"
        };
    }

    private string GetProgressBarClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "bg-green-500 dark:bg-green-400",
            NotificationType.Error => "bg-red-500 dark:bg-red-400",
            NotificationType.Warning => "bg-yellow-500 dark:bg-yellow-400",
            NotificationType.Info => "bg-blue-500 dark:bg-blue-400",
            _ => "bg-gray-500 dark:bg-gray-400"
        };
    }

    public void Dispose()
    {
        NotificationService.OnNotificationAdded -= AddNotification;
        NotificationService.OnNotificationRemoved -= RemoveNotification;

        foreach (var timer in timers.Values)
        {
            timer.Dispose();
        }
        timers.Clear();
    }
}