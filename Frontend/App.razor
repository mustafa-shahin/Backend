@using Frontend.Interface
@using Frontend.Pages
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IThemeService ThemeService

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeView>
                <Authorized>
                    @if (IsAuthorizedUser(context))
                    {
                        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                    }
                    else
                    {
                        <div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
                            <div class="max-w-md w-full bg-white dark:bg-gray-800 rounded-xl shadow-xl p-8 text-center border border-gray-200 dark:border-gray-700">
                                <div class="w-16 h-16 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center mx-auto mb-6">
                                    <i class="fas fa-ban text-red-500 dark:text-red-400 text-2xl"></i>
                                </div>
                                <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">Access Denied</h2>
                                <p class="text-gray-600 dark:text-gray-400 mb-6">
                                    You don't have permission to access this area. This dashboard is only available for administrators and developers.
                                </p>
                                <button @onclick="HandleLogout"
                                        class="inline-flex items-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900">
                                    <i class="fas fa-sign-out-alt mr-2"></i>
                                    Sign Out
                                </button>
                            </div>
                        </div>
                    }
                </Authorized>
                <NotAuthorized>
                    @if (isLoading)
                    {
                        <div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
                            <div class="text-center">
                                <div class="w-16 h-16 border-4 border-blue-200 dark:border-blue-800 border-t-blue-600 dark:border-t-blue-400 rounded-full animate-spin mx-auto mb-4"></div>
                                <p class="text-gray-600 dark:text-gray-400 text-lg font-medium">Loading CMS Designer...</p>
                                <p class="text-gray-500 dark:text-gray-500 text-sm mt-2">Checking authentication status</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <Login />
                    }
                </NotAuthorized>
            </AuthorizeView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
                    <div class="text-center max-w-md mx-auto px-4">
                        <div class="w-24 h-24 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-6">
                            <i class="fas fa-search text-gray-400 dark:text-gray-600 text-3xl"></i>
                        </div>
                        <h1 class="text-6xl font-bold text-gray-900 dark:text-white mb-2">404</h1>
                        <h2 class="text-2xl font-semibold text-gray-700 dark:text-gray-300 mb-4">Page not found</h2>
                        <p class="text-gray-600 dark:text-gray-400 mb-8">
                            The page you're looking for doesn't exist or has been moved.
                        </p>
                        <a href="/"
                           class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900">
                            <i class="fas fa-home mr-2"></i>
                            Go Home
                        </a>
                    </div>
                </div>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Inject] private IAuthService AuthService { get; set; } = default!;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize theme globally
            await ThemeService.InitializeAsync();

            // Add a small delay to ensure authentication services are properly initialized
            await Task.Delay(200);

            // Log current URL for debugging
            await JSRuntime.InvokeVoidAsync("console.log", $"Current URL: {Navigation.Uri}");

            // Check authentication status
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();

            // Get current path without using JavaScript
            var uri = new Uri(Navigation.Uri);
            var currentPath = uri.AbsolutePath;

            // If user is not authenticated and not on login page, redirect to login
            if (!isAuthenticated && !currentPath.Equals("/login", StringComparison.OrdinalIgnoreCase))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "User not authenticated, redirecting to login");
                Navigation.NavigateTo("/login", true);
                return;
            }

            // If user is authenticated and on login page, redirect to dashboard
            if (isAuthenticated && currentPath.Equals("/login", StringComparison.OrdinalIgnoreCase))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "User authenticated on login page, redirecting to dashboard");
                Navigation.NavigateTo("/", true);
                return;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"App initialization error: {ex.Message}");
            // On error, redirect to login
            Navigation.NavigateTo("/login", true);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsAuthorizedUser(AuthenticationState authState)
    {
        try
        {
            if (authState?.User?.Identity?.IsAuthenticated != true)
                return false;

            var roleClaim = authState.User.FindFirst("role")?.Value;
            return roleClaim == "Admin" || roleClaim == "Dev";
        }
        catch
        {
            return false;
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Logout error: {ex.Message}");
            Navigation.NavigateTo("/login", true);
        }
    }
}