@inject IStyleService StyleService
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <!-- Background overlay -->
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"
                 @onclick="HandleBackdropClick"
                 aria-hidden="true"></div>

            <!-- This element is to trick the browser into centering the modal contents. -->
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

            <!-- Dialog panel -->
            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
                 @onclick:stopPropagation="true">

                <!-- Content -->
                <div class="bg-white dark:bg-gray-800 px-6 pt-6 pb-4">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <div class="w-12 h-12 rounded-full @GetIconBackgroundClass() flex items-center justify-center">
                                <i class="@GetIconClass() text-white text-xl"></i>
                            </div>
                        </div>
                        <div class="ml-4 flex-1">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white" id="modal-title">
                                @Title
                            </h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-600 dark:text-gray-400">
                                    @Message
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Actions -->
                <div class="bg-gray-50 dark:bg-gray-900 px-6 py-4 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3 space-y-3 space-y-reverse sm:space-y-0">
                    <button @onclick="HandleCancel"
                            type="button"
                            disabled="@IsProcessing"
                            class="@StyleService.GetButtonClass("secondary", "medium") w-full sm:w-auto">
                        @CancelText
                    </button>

                    <button @onclick="HandleConfirm"
                            type="button"
                            disabled="@IsProcessing"
                            class="@GetConfirmButtonClass() w-full sm:w-auto">
                        @if (IsProcessing)
                        {
                            <div class="flex items-center justify-center">
                                <div class="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                                @ProcessingText
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center justify-center">
                                @if (!string.IsNullOrEmpty(ConfirmIcon))
                                {
                                    <i class="@ConfirmIcon mr-2"></i>
                                }
                                @ConfirmText
                            </div>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string ProcessingText { get; set; } = "Processing...";
    [Parameter] public string? ConfirmIcon { get; set; }
    [Parameter] public string ConfirmClass { get; set; } = "";
    [Parameter] public string Type { get; set; } = "warning"; // warning, danger, info, success
    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // State management
    private bool _isDisposing = false;
    private DotNetObjectReference<ConfirmationDialog>? _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addEscapeKeyListener", _objRef);
        }
    }

    private async Task HandleConfirm()
    {
        if (IsProcessing) return;

        try
        {
            IsProcessing = true;
            StateHasChanged();

            await OnConfirm.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in confirmation action: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            IsVisible = false;
            StateHasChanged();
        }
    }

    private async Task HandleCancel()
    {
        if (IsProcessing) return;

        IsVisible = false;
        StateHasChanged();

        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdrop && !IsProcessing)
        {
            await HandleCancel();
        }
    }

    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        if (IsVisible && !IsProcessing)
        {
            await HandleCancel();
        }
    }

    private string GetIconClass()
    {
        return Type.ToLower() switch
        {
            "danger" => "fas fa-exclamation-triangle",
            "success" => "fas fa-check",
            "info" => "fas fa-info",
            _ => "fas fa-exclamation-triangle"
        };
    }

    private string GetIconBackgroundClass()
    {
        return Type.ToLower() switch
        {
            "danger" => "bg-red-500",
            "success" => "bg-green-500",
            "info" => "bg-blue-500",
            _ => "bg-yellow-500"
        };
    }

    private string GetConfirmButtonClass()
    {
        if (!string.IsNullOrEmpty(ConfirmClass))
        {
            return ConfirmClass;
        }

        return Type.ToLower() switch
        {
            "danger" => StyleService.GetButtonClass("danger", "medium"),
            "success" => StyleService.GetButtonClass("success", "medium"),
            "info" => StyleService.GetButtonClass("primary", "medium"),
            _ => StyleService.GetButtonClass("warning", "medium")
        };
    }

    public void Show()
    {
        IsVisible = true;
        IsProcessing = false;
        StateHasChanged();
    }

    public void Hide()
    {
        IsVisible = false;
        IsProcessing = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (!_isDisposing)
        {
            _isDisposing = true;

            try
            {
                await JSRuntime.InvokeVoidAsync("removeEscapeKeyListener");
                _objRef?.Dispose();
            }
            catch (JSDisconnectedException)
            {
                // Browser has disconnected, ignore
            }
            catch (TaskCanceledException)
            {
                // Operation was cancelled, ignore
            }
        }
    }
}