@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Interfaces
@inject IFileService FileService
@inject IStyleService StyleService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

<div class="file-picker-container space-y-4">
    <!-- Upload Area -->
    <div class="border-2 border-dashed @GetUploadAreaBorderClass() rounded-lg p-6 text-center transition-all duration-200 @GetUploadAreaHoverClass()">
        <InputFile @ref="fileInputRef"
                   OnChange="OnFilesSelected"
                   multiple="@AllowMultiple"
                   accept="@GetAcceptedFileTypes()"
                   class="hidden"
                   disabled="@(IsUploading || IsReadOnly)" />

        <div class="space-y-4">
            <div class="@GetUploadIconContainerClass()">
                <i class="@GetUploadIconClass()"></i>
            </div>

            <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                    @GetUploadTitle()
                </h3>
                <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
                    @GetUploadDescription()
                </p>

                @if (!IsReadOnly)
                {
                    <button type="button"
                            @onclick="OpenFileDialog"
                            class="@StyleService.GetButtonClass("primary", "medium")"
                            disabled="@IsUploading">
                        @if (IsUploading)
                        {
                            <div class="flex items-center">
                                <div class="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                                Uploading...
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center">
                                <i class="fas fa-plus mr-2"></i>
                                @GetUploadButtonText()
                            </div>
                        }
                    </button>
                }
            </div>

            @if (MaxFileSize > 0)
            {
                <p class="text-xs text-gray-400 mt-2">
                    Max file size: @FileService.FormatFileSize(MaxFileSize)
                </p>
            }
        </div>
    </div>

    <!-- Upload Progress -->
    @if (IsUploading && uploadProgress.Any())
    {
        <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <div class="flex items-center mb-3">
                <i class="fas fa-upload text-blue-600 dark:text-blue-400 mr-2"></i>
                <span class="text-sm font-medium text-blue-900 dark:text-blue-100">
                    Uploading files...
                </span>
            </div>
            <div class="space-y-2">
                @foreach (var progress in uploadProgress)
                {
                    <div class="flex items-center space-x-3">
                        <div class="flex-1">
                            <div class="flex items-center justify-between text-sm text-blue-700 dark:text-blue-300 mb-1">
                                <span class="truncate">@progress.Key</span>
                                <span>@progress.Value%</span>
                            </div>
                            <div class="w-full bg-blue-200 dark:bg-blue-800 rounded-full h-2">
                                <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: @(progress.Value)%"></div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Files List -->
    @if (files.Any())
    {
        <div class="space-y-4">
            <div class="flex items-center justify-between">
                <h4 class="text-lg font-medium text-gray-900 dark:text-white">
                    @GetFilesTitle()
                </h4>
                @if (!IsReadOnly && files.Any())
                {
                    <button @onclick="ClearAllFiles"
                            class="@StyleService.GetButtonClass("danger", "small")"
                            disabled="@IsUploading">
                        <i class="fas fa-trash mr-1"></i>
                        Clear All
                    </button>
                }
            </div>

            @if (ViewMode == FilePickerViewMode.Grid)
            {
                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    @foreach (var file in files)
                    {
                        <div class="relative group">
                            <div class="@GetFileCardClass()">
                                <!-- File Preview -->
                                <div class="aspect-square bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden mb-3">
                                    @if (file.FileType == FileType.Image)
                                    {
                                        <img src="@GetFilePreviewUrl(file)"
                                             alt="@(file.Alt ?? file.OriginalFileName)"
                                             class="w-full h-full object-cover cursor-pointer"
                                             @onclick="() => ShowFilePreview(file)"
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                        <div class="w-full h-full flex items-center justify-center cursor-pointer" style="display: none;" @onclick="() => ShowFilePreview(file)">
                                            <i class="fas fa-image text-gray-400 text-2xl"></i>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="w-full h-full flex items-center justify-center cursor-pointer" @onclick="() => ShowFilePreview(file)">
                                            <i class="@StyleService.GetFileIcon(file.ContentType) text-3xl @StyleService.GetFileIconColor(file.FileType)"></i>
                                        </div>
                                    }
                                </div>

                                <!-- File Info -->
                                <div class="text-center">
                                    <p class="text-xs font-medium text-gray-900 dark:text-white truncate" title="@file.OriginalFileName">
                                        @file.OriginalFileName
                                    </p>
                                    <p class="text-xs text-gray-500 dark:text-gray-400">
                                        @FileService.FormatFileSize(file.FileSize)
                                    </p>
                                </div>

                                <!-- Actions -->
                                @if (!IsReadOnly)
                                {
                                    <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                        <div class="flex space-x-1">
                                            <button @onclick="() => ShowFilePreview(file)"
                                                    class="p-1 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors"
                                                    title="Preview">
                                                <i class="fas fa-eye text-xs"></i>
                                            </button>
                                            <button @onclick="() => DeleteFile(file)"
                                                    class="p-1 bg-red-600 text-white rounded-full hover:bg-red-700 transition-colors"
                                                    title="Delete"
                                                    disabled="@IsUploading">
                                                <i class="fas fa-trash text-xs"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="space-y-2">
                    @foreach (var file in files)
                    {
                        <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="flex items-center space-x-3 flex-1">
                                <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center">
                                    <i class="@StyleService.GetFileIcon(file.ContentType) text-white text-sm"></i>
                                </div>
                                <div class="flex-1 min-w-0">
                                    <p class="text-sm font-medium text-gray-900 dark:text-white truncate">
                                        @file.OriginalFileName
                                    </p>
                                    <div class="flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
                                        <span>@FileService.FormatFileSize(file.FileSize)</span>
                                        <span>@file.FileType</span>
                                        <span>@file.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                </div>
                            </div>

                            @if (!IsReadOnly)
                            {
                                <div class="flex items-center space-x-2">
                                    <button @onclick="() => ShowFilePreview(file)"
                                            class="@StyleService.GetButtonClass("secondary", "small")"
                                            title="Preview">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button @onclick="() => DeleteFile(file)"
                                            class="@StyleService.GetButtonClass("danger", "small")"
                                            title="Delete"
                                            disabled="@IsUploading">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }

    <!-- Empty State -->
    @if (!files.Any() && !IsUploading)
    {
        <div class="text-center py-8">
            <div class="w-16 h-16 mx-auto bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-4">
                <i class="fas fa-file-upload text-gray-400 text-xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
                @GetEmptyStateTitle()
            </h3>
            <p class="text-gray-500 dark:text-gray-400 mb-4">
                @GetEmptyStateDescription()
            </p>
            @if (!IsReadOnly)
            {
                <button @onclick="OpenFileDialog"
                        class="@StyleService.GetButtonClass("primary", "medium")"
                        disabled="@IsUploading">
                    <i class="fas fa-plus mr-2"></i>
                    @GetUploadButtonText()
                </button>
            }
        </div>
    }

    <!-- View Mode Toggle -->
    @if (files.Any() && ShowViewModeToggle)
    {
        <div class="flex justify-center">
            <div class="flex rounded-lg shadow-sm">
                <button @onclick="() => SetViewMode(FilePickerViewMode.Grid)"
                        class="@StyleService.GetViewToggleClass(ViewMode == FilePickerViewMode.Grid, true) rounded-r-none border-r-0">
                    <i class="fas fa-th mr-1"></i>
                    Grid
                </button>
                <button @onclick="() => SetViewMode(FilePickerViewMode.List)"
                        class="@StyleService.GetViewToggleClass(ViewMode == FilePickerViewMode.List, false) rounded-l-none">
                    <i class="fas fa-list mr-1"></i>
                    List
                </button>
            </div>
        </div>
    }
</div>

<!-- File Preview Modal -->
@if (showPreview && previewFile != null)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-black bg-opacity-75 transition-opacity" @onclick="ClosePreview"></div>

            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle w-full max-w-4xl">
                <div class="bg-white dark:bg-gray-800 p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                            @previewFile.OriginalFileName
                        </h3>
                        <button @onclick="ClosePreview"
                                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>

                    <div class="flex justify-center">
                        @if (previewFile.FileType == FileType.Image)
                        {
                            <img src="@GetFilePreviewUrl(previewFile)"
                                 alt="@(previewFile.Alt ?? previewFile.OriginalFileName)"
                                 class="max-w-full max-h-96 object-contain rounded-lg" />
                        }
                        else
                        {
                            <div class="text-center py-12">
                                <i class="@StyleService.GetFileIcon(previewFile.ContentType) text-6xl @StyleService.GetFileIconColor(previewFile.FileType) mb-4"></i>
                                <p class="text-gray-600 dark:text-gray-400 mb-4">Preview not available for this file type</p>
                                <button @onclick="() => DownloadFile(previewFile)"
                                        class="@StyleService.GetButtonClass("primary", "medium")">
                                    <i class="fas fa-download mr-2"></i>
                                    Download
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string EntityType { get; set; } = string.Empty;
    [Parameter] public int EntityId { get; set; }
    [Parameter] public bool AllowMultiple { get; set; } = true;
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool ShowViewModeToggle { get; set; } = true;
    [Parameter] public long MaxFileSize { get; set; } = 10 * 1024 * 1024; // 10MB default
    [Parameter] public string[] AllowedFileTypes { get; set; } = Array.Empty<string>();
    [Parameter] public string Title { get; set; } = "Files";
    [Parameter] public string EmptyStateTitle { get; set; } = "No files uploaded";
    [Parameter] public string EmptyStateDescription { get; set; } = "Upload files to get started";
    [Parameter] public FilePickerViewMode ViewMode { get; set; } = FilePickerViewMode.Grid;
    [Parameter] public EventCallback<List<FileDto>> OnFilesChanged { get; set; }
    [Parameter] public EventCallback<FileDto> OnFileUploaded { get; set; }
    [Parameter] public EventCallback<FileDto> OnFileDeleted { get; set; }

    private List<FileDto> files = new();
    private bool IsUploading = false;
    private Dictionary<string, int> uploadProgress = new();
    private InputFile? fileInputRef;
    private bool showPreview = false;
    private FileDto? previewFile = null;

    public enum FilePickerViewMode
    {
        Grid,
        List
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFiles();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (EntityId > 0 && !string.IsNullOrEmpty(EntityType))
        {
            await LoadFiles();
        }
    }

    private async Task LoadFiles()
    {
        try
        {
            if (EntityId > 0 && !string.IsNullOrEmpty(EntityType))
            {
                files = await FileService.GetFilesForEntityAsync(EntityType, EntityId);
                await OnFilesChanged.InvokeAsync(files);
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to load files: {ex.Message}");
        }
    }

    private async Task OpenFileDialog()
    {
        try
        {
            if (fileInputRef?.Element != null)
            {
                await JSRuntime.InvokeVoidAsync("triggerFileInput", fileInputRef.Element);
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to open file dialog: {ex.Message}");
        }
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        if (IsUploading || IsReadOnly) return;

        try
        {
            IsUploading = true;
            uploadProgress.Clear();
            StateHasChanged();

            var selectedFiles = e.GetMultipleFiles(AllowMultiple ? 10 : 1);
            var uploadTasks = new List<Task>();

            foreach (var file in selectedFiles)
            {
                if (MaxFileSize > 0 && file.Size > MaxFileSize)
                {
                    NotificationService.ShowError($"File {file.Name} is too large. Maximum size is {FileService.FormatFileSize(MaxFileSize)}");
                    continue;
                }

                if (AllowedFileTypes.Any() && !IsFileTypeAllowed(file.ContentType))
                {
                    NotificationService.ShowError($"File type {file.ContentType} is not allowed");
                    continue;
                }

                uploadTasks.Add(UploadSingleFile(file));
            }

            await Task.WhenAll(uploadTasks);
            await LoadFiles();

            NotificationService.ShowSuccess($"Successfully uploaded {uploadTasks.Count} file(s)");
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Upload failed: {ex.Message}");
        }
        finally
        {
            IsUploading = false;
            uploadProgress.Clear();
            StateHasChanged();
        }
    }

    private async Task UploadSingleFile(IBrowserFile file)
    {
        try
        {
            // Initialize progress
            uploadProgress[file.Name] = 0;
            await InvokeAsync(StateHasChanged);

            // Create FormFile wrapper
            var formFile = new FormFileWrapper(file);

            var uploadDto = new FileUploadDto
            {
                File = formFile,
                IsPublic = false,
                GenerateThumbnail = true,
                ProcessImmediately = true,
                Description = $"File uploaded for {EntityType} {EntityId}",
                Tags = new Dictionary<string, object>
                {
                    ["EntityType"] = EntityType,
                    ["EntityId"] = EntityId.ToString()
                }
            };

            // Simulate progress updates
            var progressTask = Task.Run(async () =>
            {
                for (int i = 10; i <= 90; i += 10)
                {
                    await Task.Delay(100);
                    if (uploadProgress.ContainsKey(file.Name))
                    {
                        uploadProgress[file.Name] = i;
                        await InvokeAsync(StateHasChanged);
                    }
                }
            });

            var result = await FileService.UploadFileAsync(uploadDto);
            await progressTask;

            if (result?.Success == true && result.File != null)
            {
                uploadProgress[file.Name] = 100;
                await InvokeAsync(StateHasChanged);
                await OnFileUploaded.InvokeAsync(result.File);
            }
            else
            {
                throw new Exception(result?.ErrorMessage ?? "Upload failed");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to upload {file.Name}: {ex.Message}");
            uploadProgress.Remove(file.Name);
        }
    }

    private async Task DeleteFile(FileDto file)
    {
        try
        {
            var success = await FileService.DeleteFileAsync(file.Id);
            if (success)
            {
                files.Remove(file);
                await OnFilesChanged.InvokeAsync(files);
                await OnFileDeleted.InvokeAsync(file);
                NotificationService.ShowSuccess($"File {file.OriginalFileName} deleted successfully");
            }
            else
            {
                NotificationService.ShowError("Failed to delete file");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error deleting file: {ex.Message}");
        }
    }

    private async Task ClearAllFiles()
    {
        try
        {
            var fileIds = files.Select(f => f.Id).ToList();
            var result = await FileService.DeleteMultipleFilesAsync(fileIds);

            if (result.IsCompleteSuccess)
            {
                files.Clear();
                await OnFilesChanged.InvokeAsync(files);
                NotificationService.ShowSuccess("All files deleted successfully");
            }
            else if (result.IsPartialSuccess)
            {
                // Reload files to get current state
                await LoadFiles();
                NotificationService.ShowWarning($"Deleted {result.SuccessCount} files, {result.FailureCount} failed");
            }
            else
            {
                NotificationService.ShowError($"Failed to delete files: {result.Errors.FirstOrDefault()?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Error clearing files: {ex.Message}");
        }
    }

    private void SetViewMode(FilePickerViewMode mode)
    {
        ViewMode = mode;
        StateHasChanged();
    }

    private void ShowFilePreview(FileDto file)
    {
        previewFile = file;
        showPreview = true;
        StateHasChanged();
    }

    private void ClosePreview()
    {
        showPreview = false;
        previewFile = null;
        StateHasChanged();
    }

    private async Task DownloadFile(FileDto file)
    {
        try
        {
            await FileService.DownloadFileAsync(file.Id);
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to download file: {ex.Message}");
        }
    }

    private bool IsFileTypeAllowed(string contentType)
    {
        if (!AllowedFileTypes.Any()) return true;
        return AllowedFileTypes.Any(type => contentType.Contains(type, StringComparison.OrdinalIgnoreCase));
    }

    private string GetFilePreviewUrl(FileDto file)
    {
        return FileService.GetThumbnailUrl(file.Id);
    }

    private string GetAcceptedFileTypes()
    {
        return AllowedFileTypes.Any() ? string.Join(",", AllowedFileTypes) : "*/*";
    }

    private string GetUploadTitle()
    {
        return AllowMultiple ? "Upload Files" : "Upload File";
    }

    private string GetUploadDescription()
    {
        return AllowMultiple ? "Drag and drop files here, or click to browse" : "Drag and drop a file here, or click to browse";
    }

    private string GetUploadButtonText()
    {
        return AllowMultiple ? "Choose Files" : "Choose File";
    }

    private string GetFilesTitle()
    {
        var count = files.Count;
        return count == 1 ? $"{count} File" : $"{count} Files";
    }

    private string GetEmptyStateTitle()
    {
        return string.IsNullOrEmpty(EmptyStateTitle) ? "No files uploaded" : EmptyStateTitle;
    }

    private string GetEmptyStateDescription()
    {
        return string.IsNullOrEmpty(EmptyStateDescription) ? "Upload files to get started" : EmptyStateDescription;
    }

    private string GetUploadAreaBorderClass()
    {
        return IsUploading ? "border-blue-500" : "border-gray-300 dark:border-gray-600";
    }

    private string GetUploadAreaHoverClass()
    {
        return IsReadOnly ? "" : "hover:border-blue-400 dark:hover:border-blue-500";
    }

    private string GetUploadIconContainerClass()
    {
        return $"w-16 h-16 mx-auto {(IsUploading ? "bg-blue-100 dark:bg-blue-900" : "bg-gray-100 dark:bg-gray-700")} rounded-full flex items-center justify-center";
    }

    private string GetUploadIconClass()
    {
        return $"fas fa-cloud-upload-alt text-2xl {(IsUploading ? "text-blue-600 dark:text-blue-400" : "text-gray-400")}";
    }

    private string GetFileCardClass()
    {
        return "p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 bg-white dark:bg-gray-800 transition-all duration-200";
    }

    // FormFile wrapper to convert IBrowserFile to IFormFile
    private class FormFileWrapper : IFormFile
    {
        private readonly IBrowserFile _browserFile;

        public FormFileWrapper(IBrowserFile browserFile)
        {
            _browserFile = browserFile;
        }

        public string ContentType => _browserFile.ContentType;
        public string ContentDisposition => "";
        public IHeaderDictionary Headers => new HeaderDictionary();
        public long Length => _browserFile.Size;
        public string Name => _browserFile.Name;
        public string FileName => _browserFile.Name;

        public void CopyTo(Stream target) => throw new NotImplementedException();
        public Task CopyToAsync(Stream target, CancellationToken cancellationToken = default)
            => _browserFile.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024, cancellationToken: cancellationToken).CopyToAsync(target, cancellationToken);
        public Stream OpenReadStream() => _browserFile.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
    }
}