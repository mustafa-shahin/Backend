@using Frontend.Components.Common.ConfirmationDialogComponent
@typeparam TListItem
@typeparam TDetailItem
@typeparam TCreateDto
@typeparam TUpdateDto
@inject IStyleService StyleService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

<PageTitle>@PageTitle</PageTitle>

<!-- Page Header -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 space-y-4 sm:space-y-0">
    <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
            <i class="@HeaderIcon mr-3 text-blue-600 dark:text-blue-400"></i>
            @EntityPluralName
        </h1>
        <p class="text-gray-600 dark:text-gray-400 mt-1">@PageDescription</p>
    </div>
    <div class="flex items-center space-x-3">
        @if (CustomHeaderActions != null)
        {
            @CustomHeaderActions
        }
        <button @onclick="ShowCreateDialog" class="@StyleService.GetButtonClass("primary")">
            <i class="fas fa-plus mr-2"></i>
            Create @EntitySingularName
        </button>
    </div>
</div>

<!-- Search and Filters -->
<div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden mb-6">
    <div class="p-6">
        <div class="flex flex-col lg:flex-row gap-4">
            <!-- Search -->
            <div class="flex-1">
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                    <input @bind="searchTerm" @bind:event="oninput" @onkeyup="OnSearchKeyUp"
                           type="text"
                           placeholder="Search @EntityPluralName.ToLower()..."
                           class="@StyleService.GetFormInputClass() pl-10" />
                </div>
            </div>

            <!-- Filters -->
            <div class="flex items-center space-x-3">
                @if (FilterContent != null)
                {
                    @FilterContent
                }

                <!-- View Mode Toggle -->
                @if (ShowViewModeToggle)
                {
                    <div class="flex rounded-lg shadow-sm">
                        <button @onclick="() => SetViewMode(ViewMode.Grid)"
                                class="@StyleService.GetViewToggleClass(currentViewMode == ViewMode.Grid, true) rounded-r-none border-r-0">
                            <i class="fas fa-th mr-1"></i>
                            Grid
                        </button>
                        <button @onclick="() => SetViewMode(ViewMode.List)"
                                class="@StyleService.GetViewToggleClass(currentViewMode == ViewMode.List, false) rounded-l-none">
                            <i class="fas fa-list mr-1"></i>
                            List
                        </button>
                    </div>
                }

                <button @onclick="RefreshData"
                        class="@StyleService.GetButtonClass("secondary")"
                        title="Refresh"
                        disabled="@isLoading">
                    <i class="fas fa-refresh @(isLoading ? "fa-spin" : "")"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Content Area -->
<div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
    @if (isLoading)
    {
        <div class="p-6">
            <div class="flex items-center justify-center py-12">
                <div class="text-center">
                    <div class="@StyleService.GetLoadingSpinnerClass("large") mx-auto mb-4"></div>
                    <p class="text-gray-500 dark:text-gray-400">Loading @EntityPluralName.ToLower()...</p>
                </div>
            </div>
        </div>
    }
    else if (pagedResult.Data?.Any() == true)
    {
        @if (currentViewMode == ViewMode.Grid && GridContent != null)
        {
            <div class="p-6">
                @GridContent(pagedResult.Data)
            </div>
        }
        else
        {
            <!-- Table/List View -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
                        <tr>
                            @TableColumns
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900 text-right">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        @foreach (var item in pagedResult.Data)
                        {
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150 cursor-pointer">
                                @RowTemplate(item)
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 text-right">
                                    <div class="flex items-center justify-end space-x-2">
                                        @if (CustomRowActions != null)
                                        {
                                            @CustomRowActions(item)
                                        }

                                        @if (OnView.HasDelegate)
                                        {
                                            <button @onclick="() => OnView.InvokeAsync(GetItemId(item))"
                                                    class="@StyleService.GetTableActionButtonClass("view")"
                                                    title="View">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        }

                                        <button @onclick="() => ShowEditDialog(GetItemId(item))"
                                                class="@StyleService.GetTableActionButtonClass("edit")"
                                                title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>

                                        @if (ShowDuplicateAction && OnDuplicate.HasDelegate)
                                        {
                                            <button @onclick="() => ShowDuplicateDialog(GetItemId(item))"
                                                    class="@StyleService.GetTableActionButtonClass()"
                                                    title="Duplicate">
                                                <i class="fas fa-copy"></i>
                                            </button>
                                        }

                                        <button @onclick="() => ShowDeleteConfirmation(GetItemId(item))"
                                                class="@StyleService.GetTableActionButtonClass("delete")"
                                                title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <!-- Empty State -->
        <div class="p-6">
            <div class="text-center py-12">
                <div class="mx-auto w-16 h-16 text-gray-400 dark:text-gray-500 mb-4">
                    <i class="@EmptyStateIcon"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                    @EmptyStateTitle
                </h3>
                <p class="text-gray-500 dark:text-gray-400 mb-6">
                    @EmptyStateMessage
                </p>
                <button @onclick="ShowCreateDialog" class="@StyleService.GetButtonClass("primary")">
                    <i class="fas fa-plus mr-2"></i>
                    Create First @EntitySingularName
                </button>
            </div>
        </div>
    }
</div>

<!-- Pagination -->
@if (pagedResult.TotalCount > 0 && totalPages > 1)
{
    <div class="mt-6">
        <Pagination CurrentPage="@currentPage"
                    TotalPages="@totalPages"
                    TotalItems="@pagedResult.TotalCount"
                    OnPageChanged="@OnPageChanged"
                    IsLoading="@isLoading" />
    </div>
}

<!-- Create/Edit Dialog -->
<FormDialog @ref="entityDialog"
            Title="@dialogTitle"
            Description="@dialogDescription"
            HeaderIcon="@(isEditMode ? "fas fa-edit" : "fas fa-plus")"
            IsVisible="@showEntityDialog"
            IsSaving="@isSaving"
            Size="@DialogSize"
            Model="@entityModel"
            ValidationErrors="@validationErrors"
            IsEditMode="@isEditMode"
            OnClose="@CloseEntityDialog"
            OnSave="@SaveEntity">

    <FormContent Context="formContext">
        @if (FormContent != null)
        {
            @FormContent(new FormContext
            {
                Model = formContext.Model,
                ValidationErrors = formContext.ValidationErrors,
                IsEditMode = formContext.IsEditMode,
                IsSaving = formContext.IsSaving
                })
                }
        else
        {
            <div class="text-center py-8">
                <p class="text-gray-500 dark:text-gray-400">No form content provided.</p>
            </div>
        }
    </FormContent>
</FormDialog>

<!-- Duplicate Dialog -->
@if (ShowDuplicateAction)
{
    <FormDialog @ref="duplicateDialog"
                Title="@($"Duplicate {EntitySingularName}")"
                Description="@($"Create a copy of the selected {EntitySingularName.ToLower()}")"
                HeaderIcon="fas fa-copy"
                IsVisible="@showDuplicateDialog"
                IsSaving="@isSaving"
                Size="medium"
                Model="@duplicateModel"
                OnClose="@CloseDuplicateDialog"
                OnSave="@DuplicateEntity">

        <FormContent Context="formContext">
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    New @EntitySingularName Name *
                </label>
                <input @bind="duplicateName"
                       type="text"
                       placeholder="Enter new name"
                       class="@StyleService.GetFormInputClass()" />
                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    Choose a unique name for the duplicated @EntitySingularName.ToLower().
                </p>
            </div>
        </FormContent>
    </FormDialog>
}

<!-- Delete Confirmation Dialog -->
<ConfirmationDialog @ref="deleteDialog"
                    Title="@($"Delete {EntitySingularName}")"
                    Message="@($"Are you sure you want to delete this {EntitySingularName.ToLower()}? This action cannot be undone.")"
                    ConfirmText="Delete"
                    ConfirmClass="@StyleService.GetButtonClass("danger")"
                    ConfirmIcon="fas fa-trash"
                    OnConfirm="@DeleteEntity" />