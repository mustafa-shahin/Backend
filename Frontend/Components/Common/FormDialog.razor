
@inject IStyleService StyleService
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <!-- Modal Overlay -->
    <div class="fixed inset-0 flex items-center justify-center p-4" 
         style="z-index: @ZIndex; background-color: rgba(0, 0, 0, 0.5);"
         @onclick="HandleBackdropClick"
         aria-labelledby="modal-title" role="dialog" aria-modal="true">
        
        <!-- Modal Content -->
        <div class="@GetDialogClasses()"
             @onclick:stopPropagation="true"
             style="max-height: 90vh; overflow-y: auto;">

                <!-- Header -->
                <div class="bg-white dark:bg-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex items-start justify-between">
                        <div class="flex items-center">
                            @if (!string.IsNullOrEmpty(HeaderIcon))
                            {
                                <div class="flex-shrink-0 mr-4">
                                    <div class="w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-sm">
                                        <i class="@HeaderIcon text-white text-lg"></i>
                                    </div>
                                </div>
                            }
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white" id="modal-title">
                                    @Title
                                </h3>
                                @if (!string.IsNullOrEmpty(Description))
                                {
                                    <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                                        @Description
                                    </p>
                                }
                            </div>
                        </div>
                        <button @onclick="HandleClose"
                                type="button"
                                disabled="@IsSaving"
                                class="rounded-md text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 p-2 transition-colors"
                                aria-label="Close">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                </div>

                <!-- Content -->
                <div class="@GetBodyClasses()">
                    @if (FormContent != null)
                    {
                        @FormContent(new FormContext
                        {
                            Model = Model,
                                ValidationErrors = ValidationErrors,
                                IsEditMode = IsEditMode,
                                IsSaving = IsSaving
                                })
                                }
                    else if (BodyContent != null)
                    {
                        @BodyContent
                    }
                    else
                    {
                        <div class="text-center py-8">
                            <div class="text-gray-500 dark:text-gray-400">
                                No content provided
                            </div>
                        </div>
                    }
                </div>

                <!-- Footer -->
                <div class="bg-gray-50 dark:bg-gray-900 px-6 py-4 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3 space-y-3 space-y-reverse sm:space-y-0 border-t border-gray-200 dark:border-gray-700">
                    <button @onclick="HandleClose"
                            type="button"
                            disabled="@IsSaving"
                            class="@StyleService.GetButtonClass("secondary", "medium") w-full sm:w-auto">
                        @CancelText
                    </button>

                    <button @onclick="HandleSave"
                            type="button"
                            disabled="@(IsSaving || !CanSave)"
                            class="@StyleService.GetButtonClass("primary", "medium") w-full sm:w-auto">
                        @if (IsSaving)
                        {
                            <div class="flex items-center justify-center">
                                <div class="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                                @SavingText
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center justify-center">
                                @if (!string.IsNullOrEmpty(SaveIcon))
                                {
                                    <i class="@SaveIcon mr-2"></i>
                                }
                                @SaveText
                            </div>
                        }
                    </button>
                </div>
            </div>
        </div>

}

@code {
    [Parameter] public string Title { get; set; } = "Form";
    [Parameter] public string? Description { get; set; }
    [Parameter] public string? HeaderIcon { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsSaving { get; set; }
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public string Size { get; set; } = "medium"; // xs, small, medium, large, xlarge, full
    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool CanSave { get; set; } = true;

    // Button text
    [Parameter] public string SaveText { get; set; } = "Save";
    [Parameter] public string SavingText { get; set; } = "Saving...";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string? SaveIcon { get; set; }

    // Content
    [Parameter] public RenderFragment? BodyContent { get; set; }
    [Parameter] public RenderFragment<FormContext>? FormContent { get; set; }

    // Model and validation (for form dialogs)
    [Parameter] public object? Model { get; set; }
    [Parameter] public Dictionary<string, string> ValidationErrors { get; set; } = new();

    // Events
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public int ZIndex { get; set; } = 50;

    // State management
    private bool _isDisposing = false;
    private DotNetObjectReference<FormDialog>? _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addEscapeKeyListener", _objRef);
        }
    }

    private async Task HandleClose()
    {
        if (IsSaving) return;

        await OnClose.InvokeAsync();
    }

    private async Task HandleSave()
    {
        if (IsSaving || !CanSave) return;

        await OnSave.InvokeAsync();
    }

    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdrop && !IsSaving)
        {
            await HandleClose();
        }
    }

    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        if (IsVisible && !IsSaving)
        {
            await HandleClose();
        }
    }

    private string GetDialogClasses()
    {
        var sizeClass = StyleService.GetDialogSizeClass(Size);
        return $"bg-white dark:bg-gray-800 rounded-xl shadow-2xl {sizeClass} mx-auto my-auto";
    }

    private string GetBodyClasses()
    {
        return StyleService.GetBodyClass(Size);
    }

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (!_isDisposing)
        {
            _isDisposing = true;

            try
            {
                await JSRuntime.InvokeVoidAsync("removeEscapeKeyListener");
                _objRef?.Dispose();
            }
            catch (JSDisconnectedException)
            {
                // Browser has disconnected, ignore
            }
            catch (TaskCanceledException)
            {
                // Operation was cancelled, ignore
            }
        }
    }

    // Form context class for passing data to form content
    public class FormContext
    {
        public object? Model { get; set; }
        public Dictionary<string, string> ValidationErrors { get; set; } = new();
        public bool IsEditMode { get; set; }
        public bool IsSaving { get; set; }
    }
}