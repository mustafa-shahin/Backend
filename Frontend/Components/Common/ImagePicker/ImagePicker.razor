@using Backend.CMS.Application.DTOs
@using Frontend.Components.Common
@using Frontend.Components.Files.FileBrowser
@inject IStyleService StyleService

<div class="space-y-4">
    <button type="button" class="@StyleService.GetButtonClass("primary", "small")" @onclick="OpenDialog">
        <i class="fas fa-plus mr-2"></i>Select Images
    </button>

    @if (SelectedImages?.Any() == true)
    {
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
            @foreach (var image in SelectedImages)
            {
                var url = GetImageUrlFunc?.Invoke(image) ?? string.Empty;
                var alt = GetImageAltFunc?.Invoke(image) ?? string.Empty;
                var featured = GetIsFeaturedFunc?.Invoke(image) ?? false;
                <div class="relative border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                    <img src="@url" alt="@alt" class="w-full h-32 object-cover" />
                    @if (AllowFeatured)
                    {
                        <button type="button" class="absolute top-1 left-1 text-yellow-400" @onclick="() => ToggleFeatured(image)">
                            <i class="fas fa-star @(featured ? string.Empty : "opacity-25")"></i>
                        </button>
                    }
                    <button type="button" class="absolute top-1 right-1 text-red-600" @onclick="() => RemoveImage(image)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>

<FormDialog Title="Select Images"
            IsVisible="@showDialog"
            OnClose="CloseDialog"
            OnSave="AddSelectedImages"
            SaveText="Add Images"
            HeaderIcon="fas fa-images"
            Size="xlarge">
    <BodyContent>
        <FileBrowser FileTypes="new[] { FileType.Image }"
                     AllowMultiSelect="@AllowMultiple"
                     ShowUpload="@AllowUpload"
                     OnFilesSelected="OnBrowserFilesSelected" />
    </BodyContent>
</FormDialog>

@code {
    [Parameter] public List<object> SelectedImages { get; set; } = new();
    [Parameter] public EventCallback<List<object>> SelectedImagesChanged { get; set; }
    [Parameter] public bool AllowMultiple { get; set; } = true;
    [Parameter] public bool AllowFeatured { get; set; } = false;
    [Parameter] public bool AllowUpload { get; set; } = false;

    [Parameter] public Func<object, string>? GetImageUrlFunc { get; set; }
    [Parameter] public Func<object, string?>? GetImageAltFunc { get; set; }
    [Parameter] public Func<object, bool>? GetIsFeaturedFunc { get; set; }
    [Parameter] public Func<FileDto, object>? CreateImageFromFileFunc { get; set; }
    [Parameter] public Action<object, string?, string?, bool>? UpdateImageFunc { get; set; }

    private bool showDialog = false;
    private List<FileDto> browserSelectedFiles = new();

    private void OpenDialog()
    {
        showDialog = true;
        browserSelectedFiles.Clear();
    }

    private void CloseDialog()
    {
        showDialog = false;
        browserSelectedFiles.Clear();
    }

    private void OnBrowserFilesSelected(List<FileDto> files)
    {
        browserSelectedFiles = files;
    }

    private async Task AddSelectedImages()
    {
        foreach (var file in browserSelectedFiles)
        {
            var obj = CreateImageFromFileFunc != null ? CreateImageFromFileFunc(file) : file;
            if (!AllowMultiple)
            {
                SelectedImages.Clear();
            }
            SelectedImages.Add(obj);
        }
        await SelectedImagesChanged.InvokeAsync(SelectedImages);
        CloseDialog();
    }

    private async Task RemoveImage(object image)
    {
        SelectedImages.Remove(image);
        await SelectedImagesChanged.InvokeAsync(SelectedImages);
    }

    private async Task ToggleFeatured(object image)
    {
        if (UpdateImageFunc != null)
        {
            var current = GetIsFeaturedFunc?.Invoke(image) ?? false;
            UpdateImageFunc(image, GetImageAltFunc?.Invoke(image), null, !current);
        }
        await SelectedImagesChanged.InvokeAsync(SelectedImages);
    }
}