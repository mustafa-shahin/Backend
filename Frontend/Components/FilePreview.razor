@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums

@if (IsVisible && selectedFile != null)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <!-- Backdrop -->
        <div class="fixed inset-0 bg-black bg-opacity-75" @onclick="ClosePreview"></div>

        <!-- Preview Dialog -->
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle w-full max-w-4xl">

                <!-- Header -->
                <div class="bg-white dark:bg-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                                @selectedFile.OriginalFileName
                            </h3>
                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                @FormatFileSize(selectedFile.FileSize) • @selectedFile.FileExtension.ToUpper()
                            </p>
                        </div>
                        <button @onclick="ClosePreview"
                                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                </div>

                <!-- Preview Content -->
                <div class="bg-white dark:bg-gray-800 p-6">
                    @if (selectedFile.FileType == FileType.Image)
                    {
                        <div class="flex justify-center">
                            <img src="/api/file/@(selectedFile.Id)/download"
                                 alt="@(selectedFile.Alt ?? selectedFile.OriginalFileName)"
                                 class="max-w-full max-h-[60vh] object-contain rounded-lg shadow-lg" />
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Video)
                    {
                        <div class="flex justify-center">
                            <video controls class="max-w-full max-h-[60vh] rounded-lg shadow-lg">
                                <source src="/api/file/@(selectedFile.Id)/download" type="@selectedFile.ContentType">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Audio)
                    {
                        <div class="flex justify-center">
                            <div class="w-full max-w-md">
                                <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-8 text-center mb-4">
                                    <i class="fas fa-music text-white text-4xl mb-4"></i>
                                    <h4 class="text-white font-medium">@selectedFile.OriginalFileName</h4>
                                </div>
                                <audio controls class="w-full">
                                    <source src="/api/file/@(selectedFile.Id)/download" type="@selectedFile.ContentType">
                                    Your browser does not support the audio element.
                                </audio>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-12">
                            <i class="fas fa-file text-gray-400 text-6xl mb-4"></i>
                            <p class="text-gray-600 dark:text-gray-400">Preview not available for this file type</p>
                        </div>
                    }
                </div>

                <!-- Footer -->
                <div class="bg-gray-50 dark:bg-gray-900 px-6 py-4 flex justify-between items-center">
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                        @if (selectedFile.Width.HasValue && selectedFile.Height.HasValue)
                        {
                            <span>@selectedFile.Width × @selectedFile.Height px</span>
                        }
                        @if (selectedFile.Duration.HasValue)
                        {
                            <span>Duration: @FormatDuration(selectedFile.Duration.Value)</span>
                        }
                    </div>
                    <div class="flex space-x-3">
                        <button @onclick="DownloadFile"
                                class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                            <i class="fas fa-download mr-2"></i>
                            Download
                        </button>
                        <button @onclick="ClosePreview"
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<FileDto> OnDownloadFile { get; set; }

    private bool IsVisible = false;
    private FileDto? selectedFile = null;

    public void ShowPreview(FileDto file)
    {
        selectedFile = file;
        IsVisible = true;
        StateHasChanged();
    }

    private void ClosePreview()
    {
        IsVisible = false;
        selectedFile = null;
        StateHasChanged();
    }

    private async Task DownloadFile()
    {
        if (selectedFile != null)
        {
            await OnDownloadFile.InvokeAsync(selectedFile);
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
        {
            return duration.ToString(@"h\:mm\:ss");
        }
        return duration.ToString(@"m\:ss");
    }
}