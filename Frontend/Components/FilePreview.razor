@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@inject IJSRuntime JSRuntime

@if (IsVisible && selectedFile != null)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <!-- Backdrop -->
        <div class="fixed inset-0 bg-black bg-opacity-75" @onclick="ClosePreview"></div>

        <!-- Preview Dialog -->
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle w-full max-w-4xl relative z-50"
                 @onclick:stopPropagation="true">

                <!-- Header -->
                <div class="bg-white dark:bg-gray-800 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 dark:text-white">
                                @selectedFile.OriginalFileName
                            </h3>
                            <p class="text-sm text-gray-500 dark:text-gray-400">
                                @FormatFileSize(selectedFile.FileSize) • @selectedFile.FileExtension.ToUpper()
                                @if (selectedFile.Width.HasValue && selectedFile.Height.HasValue)
                                {
                                    <span> • @selectedFile.Width × @selectedFile.Height</span>
                                }
                            </p>
                        </div>
                        <button @onclick="ClosePreview"
                                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors">
                            <i class="fas fa-times text-xl"></i>
                        </button>
                    </div>
                </div>

                <!-- Preview Content -->
                <div class="bg-white dark:bg-gray-800 p-6">
                    @if (selectedFile.FileType == FileType.Image)
                    {
                        <div class="flex justify-center">
                            <img src="@GetFileUrl(selectedFile.Id)"
                                 alt="@(selectedFile.Alt ?? selectedFile.OriginalFileName)"
                                 class="max-w-full max-h-[60vh] object-contain rounded-lg shadow-lg"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                            <!-- Fallback for failed image load -->
                            <div class="w-full h-64 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center" style="display: none;">
                                <div class="text-center">
                                    <i class="fas fa-image text-gray-400 text-4xl mb-2"></i>
                                    <p class="text-gray-500 dark:text-gray-400">Image could not be loaded</p>
                                </div>
                            </div>
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Video)
                    {
                        <div class="flex justify-center">
                            <video controls class="max-w-full max-h-[60vh] rounded-lg shadow-lg">
                                <source src="@GetFileUrl(selectedFile.Id)" type="@selectedFile.ContentType">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Audio)
                    {
                        <div class="flex justify-center">
                            <div class="w-full max-w-md">
                                <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-8 text-center mb-4">
                                    <i class="fas fa-music text-white text-4xl mb-4"></i>
                                    <h4 class="text-white font-medium">@selectedFile.OriginalFileName</h4>
                                    @if (selectedFile.Duration.HasValue)
                                    {
                                        <p class="text-purple-200 text-sm mt-2">Duration: @FormatDuration(selectedFile.Duration.Value)</p>
                                    }
                                </div>
                                <audio controls class="w-full">
                                    <source src="@GetFileUrl(selectedFile.Id)" type="@selectedFile.ContentType">
                                    Your browser does not support the audio element.
                                </audio>
                            </div>
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Document)
                    {
                        <div class="text-center py-12">
                            <i class="@GetDocumentIcon(selectedFile.FileExtension) text-6xl mb-4 @GetDocumentColor(selectedFile.FileExtension)"></i>
                            <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-2">@selectedFile.OriginalFileName</h4>
                            <p class="text-gray-600 dark:text-gray-400 mb-4">Document preview not available</p>
                            <button @onclick="DownloadFile"
                                    class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                <i class="fas fa-download mr-2"></i>
                                Download to View
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-12">
                            <i class="fas fa-file text-gray-400 text-6xl mb-4"></i>
                            <p class="text-gray-600 dark:text-gray-400">Preview not available for this file type</p>
                        </div>
                    }
                </div>

                <!-- Footer -->
                <div class="bg-gray-50 dark:bg-gray-900 px-6 py-4 flex justify-between items-center">
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                        @if (selectedFile.Width.HasValue && selectedFile.Height.HasValue)
                        {
                            <span>@selectedFile.Width × @selectedFile.Height px</span>
                        }
                        @if (selectedFile.Duration.HasValue)
                        {
                            <span>Duration: @FormatDuration(selectedFile.Duration.Value)</span>
                        }
                        @if (selectedFile.IsPublic)
                        {
                            <span class="ml-4 inline-flex items-center text-green-600 dark:text-green-400">
                                <i class="fas fa-globe mr-1"></i>
                                Public
                            </span>
                        }
                        else
                        {
                            <span class="ml-4 inline-flex items-center text-gray-600 dark:text-gray-400">
                                <i class="fas fa-lock mr-1"></i>
                                Private
                            </span>
                        }
                    </div>
                    <div class="flex space-x-3">
                        <button @onclick="DownloadFile"
                                class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                            <i class="fas fa-download mr-2"></i>
                            Download
                        </button>
                        <button @onclick="ClosePreview"
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<FileDto> OnDownloadFile { get; set; }

    private bool IsVisible = false;
    private FileDto? selectedFile = null;

    public void ShowPreview(FileDto file)
    {
        selectedFile = file;
        IsVisible = true;
        StateHasChanged();
    }

    private void ClosePreview()
    {
        IsVisible = false;
        selectedFile = null;
        StateHasChanged();
    }

    private async Task DownloadFile()
    {
        if (selectedFile != null)
        {
            if (OnDownloadFile.HasDelegate)
            {
                await OnDownloadFile.InvokeAsync(selectedFile);
            }
            else
            {
                // Fallback download method
                var downloadUrl = GetFileUrl(selectedFile.Id);
                await JSRuntime.InvokeVoidAsync("downloadFile", downloadUrl, selectedFile.OriginalFileName);
            }
        }
    }

    private string GetFileUrl(int fileId)
    {
        return $"/api/file/{fileId}/download";
    }

    private string GetDocumentIcon(string extension)
    {
        return extension.ToLower() switch
        {
            ".pdf" => "fas fa-file-pdf",
            ".doc" or ".docx" => "fas fa-file-word",
            ".xls" or ".xlsx" => "fas fa-file-excel",
            ".ppt" or ".pptx" => "fas fa-file-powerpoint",
            ".txt" => "fas fa-file-alt",
            ".zip" or ".rar" or ".7z" => "fas fa-file-archive",
            _ => "fas fa-file"
        };
    }

    private string GetDocumentColor(string extension)
    {
        return extension.ToLower() switch
        {
            ".pdf" => "text-red-600 dark:text-red-400",
            ".doc" or ".docx" => "text-blue-600 dark:text-blue-400",
            ".xls" or ".xlsx" => "text-green-600 dark:text-green-400",
            ".ppt" or ".pptx" => "text-orange-600 dark:text-orange-400",
            ".txt" => "text-gray-600 dark:text-gray-400",
            ".zip" or ".rar" or ".7z" => "text-yellow-600 dark:text-yellow-400",
            _ => "text-gray-600 dark:text-gray-400"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
        {
            return duration.ToString(@"h\:mm\:ss");
        }
        return duration.ToString(@"m\:ss");
    }
}