@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@using Frontend.Interfaces
@inject IJSRuntime JSRuntime
@inject IFileService FileService
@inject IStyleService StyleService
@inject INotificationService NotificationService

@if (IsVisible && selectedFile != null)
{
    <div class="fixed inset-0 z-50 overflow-y-auto">
        <!-- Backdrop -->
        <div class="fixed inset-0 bg-black bg-opacity-75 transition-opacity" @onclick="ClosePreview"></div>

        <!-- Preview Dialog -->
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle w-full max-w-6xl relative z-50"
                 @onclick:stopPropagation="true">

                <!-- Header -->
                <div class="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <div class="flex-shrink-0">
                                <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center shadow-sm">
                                    <i class="@StyleService.GetFileIcon(selectedFile.FileType) text-white text-lg"></i>
                                </div>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white truncate">
                                    @selectedFile.OriginalFileName
                                </h3>
                                <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mt-1">
                                    <span class="flex items-center">
                                        <i class="fas fa-weight-hanging mr-1"></i>
                                        @FileService.FormatFileSize(selectedFile.FileSize)
                                    </span>
                                    <span class="flex items-center">
                                        <i class="fas fa-file-alt mr-1"></i>
                                        @selectedFile.FileExtension.ToUpper()
                                    </span>
                                    @if (selectedFile.Width.HasValue && selectedFile.Height.HasValue)
                                    {
                                        <span class="flex items-center">
                                            <i class="fas fa-expand-arrows-alt mr-1"></i>
                                            @selectedFile.Width × @selectedFile.Height
                                        </span>
                                    }
                                    @if (selectedFile.Duration.HasValue)
                                    {
                                        <span class="flex items-center">
                                            <i class="fas fa-clock mr-1"></i>
                                            @FileService.FormatDuration(selectedFile.Duration.Value)
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>
                        <button @onclick="ClosePreview"
                                class="flex-shrink-0 p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-all duration-200"
                                title="Close preview">
                            <i class="fas fa-times text-lg"></i>
                        </button>
                    </div>
                </div>

                <!-- Preview Content -->
                <div class="bg-white dark:bg-gray-800 p-6 max-h-[70vh] overflow-y-auto">
                    @if (selectedFile.FileType == FileType.Image)
                    {
                        <div class="flex justify-center bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                            <img src="@FileService.GetFileUrl(selectedFile.Id)"
                                 alt="@(selectedFile.Alt ?? selectedFile.OriginalFileName)"
                                 class="max-w-full max-h-[60vh] object-contain rounded-lg shadow-lg"
                                 style="max-height: 60vh;"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                            <!-- Fallback for failed image load -->
                            <div class="w-full h-64 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center" style="display: none;">
                                <div class="text-center">
                                    <i class="fas fa-image text-gray-400 text-4xl mb-2"></i>
                                    <p class="text-gray-500 dark:text-gray-400">Image could not be loaded</p>
                                    <button @onclick="DownloadFile"
                                            class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                        <i class="fas fa-download mr-2"></i>
                                        Download File
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Video)
                    {
                        <div class="flex justify-center bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
                            @if (isLoadingVideoUrl)
                            {
                                <div class="flex items-center justify-center w-full h-64">
                                    <div class="text-center">
                                        <div class="animate-spin rounded-full h-12 w-12 border-4 border-gray-200 dark:border-gray-600 border-t-blue-600 dark:border-t-blue-400 mb-4 mx-auto"></div>
                                        <p class="text-gray-500 dark:text-gray-400">Loading video...</p>
                                    </div>
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(videoStreamUrl))
                            {
                                <div class="w-full max-w-4xl">
                                    <video @ref="videoElement"
                                           controls
                                           preload="metadata"
                                           class="w-full max-h-[60vh] rounded-lg shadow-lg bg-black"
                                           style="max-height: 60vh;"
                                           @onloadstart="OnVideoLoadStart"
                                           @oncanplay="OnVideoCanPlay"
                                           @onerror="OnVideoError">
                                        <source src="@videoStreamUrl" type="@selectedFile.ContentType">
                                        @if (!string.IsNullOrEmpty(fallbackVideoUrl) && fallbackVideoUrl != videoStreamUrl)
                                        {
                                            <source src="@fallbackVideoUrl" type="@selectedFile.ContentType">
                                        }
                                        <p class="text-gray-500 dark:text-gray-400 p-4">
                                            Your browser does not support the video tag.
                                            <button @onclick="DownloadFile" class="text-blue-600 hover:text-blue-800 underline ml-2">
                                                Download the video file instead.
                                            </button>
                                        </p>
                                    </video>

                                    @if (videoError)
                                    {
                                        <div class="mt-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                                            <div class="flex items-center">
                                                <i class="fas fa-exclamation-triangle text-red-600 dark:text-red-400 mr-2"></i>
                                                <span class="text-red-800 dark:text-red-200 text-sm">
                                                    Unable to play this video. The format may not be supported by your browser.
                                                </span>
                                            </div>
                                            <button @onclick="DownloadFile"
                                                    class="mt-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm">
                                                <i class="fas fa-download mr-2"></i>
                                                Download Video
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-12">
                                    <i class="fas fa-video text-gray-400 text-6xl mb-4"></i>
                                    <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">@selectedFile.OriginalFileName</h4>
                                    <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to load video for preview</p>
                                    <button @onclick="DownloadFile"
                                            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-sm">
                                        <i class="fas fa-download mr-2"></i>
                                        Download & View
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Audio)
                    {
                        <div class="flex justify-center">
                            <div class="w-full max-w-md">
                                <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-8 text-center mb-6">
                                    <i class="fas fa-music text-white text-4xl mb-4"></i>
                                    <h4 class="text-white font-semibold text-lg">@selectedFile.OriginalFileName</h4>
                                    @if (selectedFile.Duration.HasValue)
                                    {
                                        <p class="text-purple-200 text-sm mt-2">Duration: @FileService.FormatDuration(selectedFile.Duration.Value)</p>
                                    }
                                </div>

                                @if (isLoadingAudioUrl)
                                {
                                    <div class="flex items-center justify-center w-full py-4">
                                        <div class="text-center">
                                            <div class="animate-spin rounded-full h-8 w-8 border-4 border-gray-200 dark:border-gray-600 border-t-purple-600 dark:border-t-purple-400 mb-2 mx-auto"></div>
                                            <p class="text-gray-500 dark:text-gray-400 text-sm">Loading audio...</p>
                                        </div>
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(audioStreamUrl))
                                {
                                    <audio @ref="audioElement"
                                           controls
                                           preload="metadata"
                                           class="w-full"
                                           @onloadstart="OnAudioLoadStart"
                                           @oncanplay="OnAudioCanPlay"
                                           @onerror="OnAudioError">
                                        <source src="@audioStreamUrl" type="@selectedFile.ContentType">
                                        @if (!string.IsNullOrEmpty(fallbackAudioUrl) && fallbackAudioUrl != audioStreamUrl)
                                        {
                                            <source src="@fallbackAudioUrl" type="@selectedFile.ContentType">
                                        }
                                        <p class="text-gray-500 dark:text-gray-400 text-sm">
                                            Your browser does not support the audio element.
                                            <button @onclick="DownloadFile" class="text-purple-600 hover:text-purple-800 underline ml-1">
                                                Download instead.
                                            </button>
                                        </p>
                                    </audio>

                                    @if (audioError)
                                    {
                                        <div class="mt-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
                                            <p class="text-red-800 dark:text-red-200 text-sm">Unable to play this audio file.</p>
                                            <button @onclick="DownloadFile"
                                                    class="mt-2 px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700 transition-colors">
                                                <i class="fas fa-download mr-1"></i>
                                                Download
                                            </button>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center py-4">
                                        <p class="text-gray-600 dark:text-gray-400 mb-4">Unable to load audio for preview</p>
                                        <button @onclick="DownloadFile"
                                                class="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                                            <i class="fas fa-download mr-2"></i>
                                            Download & Play
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (selectedFile.FileType == FileType.Document)
                    {
                        <div class="text-center py-12">
                            <div class="mb-6">
                                <i class="@StyleService.GetDocumentIcon(selectedFile.FileExtension) text-6xl mb-4 @StyleService.GetDocumentColor(selectedFile.FileExtension)"></i>
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">@selectedFile.OriginalFileName</h4>
                                <p class="text-gray-600 dark:text-gray-400 mb-4">Document preview not available in browser</p>
                            </div>

                            <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
                                <p class="text-blue-800 dark:text-blue-200 text-sm">
                                    <i class="fas fa-info-circle mr-2"></i>
                                    To view this document, please download it and open with an appropriate application.
                                </p>
                            </div>

                            <button @onclick="DownloadFile"
                                    class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-sm">
                                <i class="fas fa-download mr-2"></i>
                                Download & View
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-12">
                            <div class="mb-6">
                                <i class="fas fa-file text-gray-400 text-6xl mb-4"></i>
                                <h4 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">@selectedFile.OriginalFileName</h4>
                                <p class="text-gray-600 dark:text-gray-400 mb-4">Preview not available for this file type</p>
                            </div>

                            <button @onclick="DownloadFile"
                                    class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-sm">
                                <i class="fas fa-download mr-2"></i>
                                Download File
                            </button>
                        </div>
                    }
                </div>

                <!-- Footer -->
                <div class="bg-gray-50 dark:bg-gray-900 px-6 py-4 flex justify-between items-center border-t border-gray-200 dark:border-gray-700">
                    <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                        @if (selectedFile.Width.HasValue && selectedFile.Height.HasValue)
                        {
                            <span class="flex items-center">
                                <i class="fas fa-expand-arrows-alt mr-1"></i>
                                @selectedFile.Width × @selectedFile.Height px
                            </span>
                        }
                        @if (selectedFile.Duration.HasValue)
                        {
                            <span class="flex items-center">
                                <i class="fas fa-clock mr-1"></i>
                                @FileService.FormatDuration(selectedFile.Duration.Value)
                            </span>
                        }
                        @if (selectedFile.IsPublic)
                        {
                            <span class="inline-flex items-center text-green-600 dark:text-green-400">
                                <i class="fas fa-globe mr-1"></i>
                                Public
                            </span>
                        }
                        else
                        {
                            <span class="inline-flex items-center text-red-600 dark:text-red-400">
                                <i class="fas fa-lock mr-1"></i>
                                Private
                            </span>
                        }
                    </div>

                    <div class="flex space-x-3">
                        <button @onclick="DownloadFile"
                                class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                            <i class="fas fa-download mr-2"></i>
                            Download
                        </button>
                        <button @onclick="ClosePreview"
                                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition-colors">
                            <i class="fas fa-times mr-2"></i>
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<FileDto> OnDownloadFile { get; set; }

    private bool IsVisible = false;
    private FileDto? selectedFile = null;

    // Video/Audio streaming state
    private bool isLoadingVideoUrl = false;
    private bool isLoadingAudioUrl = false;
    private string? videoStreamUrl = null;
    private string? audioStreamUrl = null;
    private string? fallbackVideoUrl = null;
    private string? fallbackAudioUrl = null;
    private bool videoError = false;
    private bool audioError = false;

    // Element references
    private ElementReference? videoElement;
    private ElementReference? audioElement;

    public void ShowPreview(FileDto file)
    {
        selectedFile = file;
        IsVisible = true;

        // Reset streaming state
        ResetStreamingState();

        // Load streaming URLs for video/audio files
        if (file.FileType == FileType.Video)
        {
            _ = LoadVideoStreamingUrlAsync(file);
        }
        else if (file.FileType == FileType.Audio)
        {
            _ = LoadAudioStreamingUrlAsync(file);
        }

        StateHasChanged();
    }

    private void ClosePreview()
    {
        IsVisible = false;
        selectedFile = null;
        ResetStreamingState();
        StateHasChanged();
    }

    private void ResetStreamingState()
    {
        isLoadingVideoUrl = false;
        isLoadingAudioUrl = false;
        videoStreamUrl = null;
        audioStreamUrl = null;
        fallbackVideoUrl = null;
        fallbackAudioUrl = null;
        videoError = false;
        audioError = false;
    }

    private async Task LoadVideoStreamingUrlAsync(FileDto file)
    {
        try
        {
            isLoadingVideoUrl = true;
            videoError = false;
            StateHasChanged();

            if (file.IsPublic)
            {
                // For public files, use direct streaming URL
                videoStreamUrl = FileService.GetStreamingUrl(file.Id);
                fallbackVideoUrl = FileService.GetFileUrl(file.Id);
            }
            else
            {
                // For private files, get streaming URL with token
                videoStreamUrl = await FileService.GetStreamingUrlWithTokenAsync(file.Id);
                fallbackVideoUrl = FileService.GetFileUrl(file.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading video streaming URL: {ex.Message}");
            NotificationService.ShowError("Failed to load video streaming URL");

            // Fallback to regular file URL
            videoStreamUrl = FileService.GetFileUrl(file.Id);
        }
        finally
        {
            isLoadingVideoUrl = false;
            StateHasChanged();
        }
    }

    private async Task LoadAudioStreamingUrlAsync(FileDto file)
    {
        try
        {
            isLoadingAudioUrl = true;
            audioError = false;
            StateHasChanged();

            if (file.IsPublic)
            {
                // For public files, use direct streaming URL
                audioStreamUrl = FileService.GetStreamingUrl(file.Id);
                fallbackAudioUrl = FileService.GetFileUrl(file.Id);
            }
            else
            {
                // For private files, get streaming URL with token
                audioStreamUrl = await FileService.GetStreamingUrlWithTokenAsync(file.Id);
                fallbackAudioUrl = FileService.GetFileUrl(file.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading audio streaming URL: {ex.Message}");
            NotificationService.ShowError("Failed to load audio streaming URL");

            // Fallback to regular file URL
            audioStreamUrl = FileService.GetFileUrl(file.Id);
        }
        finally
        {
            isLoadingAudioUrl = false;
            StateHasChanged();
        }
    }

    private async Task DownloadFile()
    {
        if (selectedFile != null)
        {
            try
            {
                if (OnDownloadFile.HasDelegate)
                {
                    await OnDownloadFile.InvokeAsync(selectedFile);
                }
                else
                {
                    await FileService.DownloadFileAsync(selectedFile.Id);
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error downloading file: {ex.Message}");
                NotificationService.ShowError("Failed to download file");

                // Fallback to direct download
                try
                {
                    var downloadUrl = FileService.GetFileUrl(selectedFile.Id);
                    await JSRuntime.InvokeVoidAsync("downloadFileWithAuth", downloadUrl, selectedFile.OriginalFileName);
                }
                catch (Exception fallbackEx)
                {
                    Console.Error.WriteLine($"Fallback download also failed: {fallbackEx.Message}");
                    NotificationService.ShowError("Download failed. Please try again later.");
                }
            }
        }
    }

    // Video event handlers
    private void OnVideoLoadStart()
    {
        Console.WriteLine("Video load started");
    }

    private void OnVideoCanPlay()
    {
        Console.WriteLine("Video can play");
        videoError = false;
        StateHasChanged();
    }

    private void OnVideoError()
    {
        Console.WriteLine("Video error occurred");
        videoError = true;
        StateHasChanged();
    }

    // Audio event handlers
    private void OnAudioLoadStart()
    {
        Console.WriteLine("Audio load started");
    }

    private void OnAudioCanPlay()
    {
        Console.WriteLine("Audio can play");
        audioError = false;
        StateHasChanged();
    }

    private void OnAudioError()
    {
        Console.WriteLine("Audio error occurred");
        audioError = true;
        StateHasChanged();
    }
}