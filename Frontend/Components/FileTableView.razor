@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@using Frontend.Interfaces
@inject IStyleService StyleService
@inject IFileService FileService

<table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
    <thead class="bg-gray-50 dark:bg-gray-900">
        <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">@GetFileTypeName()</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Name</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Size</th>
            @if (ShowDurationColumn())
            {
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Duration</th>
            }
            @if (ShowDimensionsColumn())
            {
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Dimensions</th>
            }
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Modified</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider text-right">Actions</th>
        </tr>
    </thead>
    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
        @foreach (var file in Files)
        {
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150">
                <!-- File Preview/Icon -->
                <td class="px-6 py-4 whitespace-nowrap">
                    @if (FileType == Backend.CMS.Domain.Enums.FileType.Image)
                    {
                        <div class="w-16 h-16 rounded-lg overflow-hidden shadow-sm cursor-pointer"
                             @onclick="() => OnPreviewFile.InvokeAsync(file)">
                            <img src="@FileService.GetThumbnailUrl(file.Id)"
                                 alt="@(file.Alt ?? file.OriginalFileName)"
                                 class="w-full h-full object-cover hover:scale-105 transition-transform duration-200"
                                 loading="lazy"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                            <div class="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center" style="display: none;">
                                <i class="fas fa-image text-gray-400"></i>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="w-12 h-12 rounded overflow-hidden @GetFileIconBackgroundClass() flex items-center justify-center">
                            <i class="@StyleService.GetFileIcon(FileType) @StyleService.GetFileIconColor(FileType)"></i>
                        </div>
                    }
                </td>

                <!-- File Name and Extension -->
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900 dark:text-white">@file.OriginalFileName</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400 flex items-center space-x-2">
                        <span>@file.FileExtension.ToUpper()</span>
                        @if (file.IsPublic)
                        {
                            <span class="inline-flex items-center text-green-600 dark:text-green-400" title="Public">
                                <i class="fas fa-globe text-xs"></i>
                            </span>
                        }
                        else
                        {
                            <span class="inline-flex items-center text-red-600 dark:text-red-400" title="Private">
                                <i class="fas fa-lock text-xs"></i>
                            </span>
                        }
                    </div>
                </td>

                <!-- File Size -->
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                    @file.FileSizeFormatted
                </td>

                <!-- Duration (for video/audio) -->
                @if (ShowDurationColumn())
                {
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                        @if (file.Duration.HasValue)
                        {
                            <span>@FileService.FormatDuration(file.Duration.Value)</span>
                        }
                        else
                        {
                            <span class="text-gray-400">—</span>
                        }
                    </td>
                }

                <!-- Dimensions (for images/videos) -->
                @if (ShowDimensionsColumn())
                {
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                        @if (file.Width.HasValue && file.Height.HasValue)
                        {
                            <span>@file.Width × @file.Height px</span>
                        }
                        else
                        {
                            <span class="text-gray-400">—</span>
                        }
                    </td>
                }

                <!-- Modified Date -->
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                    <div class="flex flex-col">
                        <span>@file.UpdatedAt.ToString("MMM dd, yyyy")</span>
                        <span class="text-xs text-gray-500 dark:text-gray-400">@file.UpdatedAt.ToString("HH:mm")</span>
                    </div>
                </td>

                <!-- Actions -->
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 text-right">
                    <div class="flex items-center justify-end space-x-2">
                        <!-- Preview button (for previewable files) -->
                        @if (CanPreview(file))
                        {
                            <button @onclick="() => OnPreviewFile.InvokeAsync(file)"
                                    class="@StyleService.GetTableActionButtonClass("view") hover:bg-green-50 dark:hover:bg-green-900/20 rounded p-1"
                                    title="Preview">
                                <i class="fas fa-eye text-sm"></i>
                            </button>
                        }

                        <!-- Download button -->
                        <button @onclick="() => OnDownloadFile.InvokeAsync(file)"
                                class="@StyleService.GetTableActionButtonClass() hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded p-1"
                                title="Download">
                            <i class="fas fa-download text-sm"></i>
                        </button>

                        <!-- Edit button -->
                        <button @onclick="() => OnEditFile.InvokeAsync(file)"
                                class="@StyleService.GetTableActionButtonClass("edit") hover:bg-yellow-50 dark:hover:bg-yellow-900/20 rounded p-1"
                                title="Edit">
                            <i class="fas fa-edit text-sm"></i>
                        </button>

                        <!-- Delete button -->
                        <button @onclick="() => OnDeleteFile.InvokeAsync(file)"
                                class="@StyleService.GetTableActionButtonClass("delete") hover:bg-red-50 dark:hover:bg-red-900/20 rounded p-1"
                                title="Delete">
                            <i class="fas fa-trash text-sm"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter, EditorRequired] public IEnumerable<FileDto> Files { get; set; } = new List<FileDto>();
    [Parameter, EditorRequired] public FileType FileType { get; set; }
    [Parameter] public EventCallback<FileDto> OnEditFile { get; set; }
    [Parameter] public EventCallback<FileDto> OnDeleteFile { get; set; }
    [Parameter] public EventCallback<FileDto> OnDownloadFile { get; set; }
    [Parameter] public EventCallback<FileDto> OnPreviewFile { get; set; }

    private string GetFileTypeName()
    {
        return FileType switch
        {
            FileType.Image => "Picture",
            FileType.Video => "Video",
            FileType.Audio => "Audio",
            FileType.Document => "Document",
            _ => "File"
        };
    }

    private bool ShowDurationColumn()
    {
        return FileType == FileType.Video || FileType == FileType.Audio;
    }

    private bool ShowDimensionsColumn()
    {
        return FileType == FileType.Image || FileType == FileType.Video;
    }

    private bool CanPreview(FileDto file)
    {
        return FileType switch
        {
            FileType.Image => true,
            FileType.Video => true,
            FileType.Audio => true,
            FileType.Document => file.FileExtension.ToLower() == ".pdf",
            _ => false
        };
    }

    private string GetFileIconBackgroundClass()
    {
        return FileType switch
        {
            FileType.Video => "bg-blue-100 dark:bg-blue-900/30",
            FileType.Audio => "bg-purple-100 dark:bg-purple-900/30",
            FileType.Document => "bg-red-100 dark:bg-red-900/30",
            _ => "bg-gray-100 dark:bg-gray-700"
        };
    }
}