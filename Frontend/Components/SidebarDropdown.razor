@inject NavigationManager Navigation

<div class="relative">
    <!-- Parent Item -->
    <button @onclick="ToggleDropdown"
            class="@GetParentItemClass()"
            title="@GetTooltip()">
        <div class="flex items-center @(IsCollapsed ? "justify-center" : "justify-between") w-full">
            <div class="flex items-center @(IsCollapsed ? "justify-center" : "")">
                <div class="@GetIconContainerClass()">
                    <i class="@Icon @GetIconClass()"></i>
                </div>
                @if (!IsCollapsed)
                {
                    <span class="ml-3 text-sm font-medium">@Text</span>
                }
            </div>
            @if (!IsCollapsed)
            {
                <i class="fas fa-chevron-right transform transition-transform duration-200 @(isOpen ? "rotate-90" : "") text-xs text-gray-400"></i>
            }
        </div>
        @if (IsAnyChildActive && !IsCollapsed)
        {
            <div class="absolute right-0 top-1/2 transform -translate-y-1/2 w-1 h-6 bg-blue-600 dark:bg-blue-400 rounded-l-full"></div>
        }
    </button>

    <!-- Dropdown Items -->
    @if (isOpen || IsCollapsed)
    {
        <div class="@GetDropdownClass()">
            @if (IsCollapsed)
            {
                <!-- Collapsed state - show as floating menu -->
                <div class="absolute left-full top-0 ml-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg py-2 z-50 min-w-48">
                    <div class="px-3 py-2 text-xs font-semibold text-gray-500 dark:text-gray-400 border-b border-gray-200 dark:border-gray-700 mb-2">
                        @Text
                    </div>
                    @foreach (var item in Items)
                    {
                        <a href="@item.Href"
                           class="@GetCollapsedItemClass(item.Href)"
                           title="@item.Text">
                            <div class="flex items-center">
                                <i class="@item.Icon text-sm @GetCollapsedItemIconClass(item.Href) mr-3"></i>
                                <span class="text-sm">@item.Text</span>
                            </div>
                        </a>
                    }
                </div>
            }
            else
            {
                <!-- Expanded state - show as regular dropdown -->
                @foreach (var item in Items)
                {
                    <a href="@item.Href"
                       class="@GetChildItemClass(item.Href)"
                       title="@item.Text">
                        <div class="flex items-center">
                            <div class="w-8 h-8 flex items-center justify-center">
                                <i class="@item.Icon text-sm @GetChildItemIconClass(item.Href)"></i>
                            </div>
                            <span class="ml-3 text-sm">@item.Text</span>
                        </div>
                        @if (IsChildActive(item.Href))
                        {
                            <div class="absolute right-0 top-1/2 transform -translate-y-1/2 w-1 h-6 bg-blue-600 dark:bg-blue-400 rounded-l-full"></div>
                        }
                    </a>
                }
            }
        </div>
    }
</div>

@code {
    [Parameter] public string Icon { get; set; } = string.Empty;
    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public List<DropdownItem> Items { get; set; } = new();

    private bool isOpen = false;

    public class DropdownItem
    {
        public string Icon { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string Href { get; set; } = string.Empty;
    }

    protected override void OnParametersSet()
    {
        // Auto-open if any child is active
        if (IsAnyChildActive && !IsCollapsed)
        {
            isOpen = true;
        }
    }

    private bool IsAnyChildActive =>
        Items.Any(item => IsChildActive(item.Href));

    private bool IsChildActive(string href) =>
        Navigation.Uri.Contains(href) && href != "/";

    private void ToggleDropdown()
    {
        if (!IsCollapsed)
        {
            isOpen = !isOpen;
        }
        StateHasChanged();
    }

    private string GetParentItemClass()
    {
        var baseClass = "relative flex items-center px-3 py-2.5 rounded-lg transition-all duration-200 group w-full text-left";

        var stateClass = IsAnyChildActive
            ? "bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 shadow-sm"
            : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100";

        return $"{baseClass} {stateClass}";
    }

    private string GetIconContainerClass()
    {
        if (IsAnyChildActive)
        {
            return "flex items-center justify-center w-8 h-8 rounded-lg bg-blue-100 dark:bg-blue-800/50";
        }

        return "flex items-center justify-center w-8 h-8 rounded-lg group-hover:bg-gray-200 dark:group-hover:bg-gray-600 transition-colors duration-200";
    }

    private string GetIconClass()
    {
        var sizeClass = IsCollapsed ? "text-lg" : "text-base";

        if (IsAnyChildActive)
        {
            return $"{sizeClass} text-blue-600 dark:text-blue-300";
        }

        return $"{sizeClass} text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-200";
    }

    private string GetDropdownClass()
    {
        if (IsCollapsed)
        {
            return "relative"; // Container for floating menu
        }

        return "mt-1 space-y-1 overflow-hidden transition-all duration-200";
    }

    private string GetChildItemClass(string href)
    {
        var baseClass = "relative flex items-center px-3 py-2 ml-4 rounded-lg transition-all duration-200 group";

        var stateClass = IsChildActive(href)
            ? "bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 shadow-sm"
            : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100";

        return $"{baseClass} {stateClass}";
    }

    private string GetChildItemIconClass(string href)
    {
        if (IsChildActive(href))
        {
            return "text-blue-600 dark:text-blue-300";
        }

        return "text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-200";
    }

    private string GetCollapsedItemClass(string href)
    {
        var baseClass = "flex items-center px-3 py-2 transition-all duration-200 hover:bg-gray-100 dark:hover:bg-gray-700";

        var stateClass = IsChildActive(href)
            ? "bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300"
            : "text-gray-700 dark:text-gray-300";

        return $"{baseClass} {stateClass}";
    }

    private string GetCollapsedItemIconClass(string href)
    {
        if (IsChildActive(href))
        {
            return "text-blue-600 dark:text-blue-300";
        }

        return "text-gray-500 dark:text-gray-400";
    }

    private string GetTooltip()
    {
        if (IsCollapsed)
        {
            return Text;
        }
        return string.Empty;
    }
}