
@inject IStyleService StyleService
@inject IJSRuntime JSRuntime

<div class="space-y-6">
    <!-- File Preview -->
    @if (OriginalFile != null)
    {
        <div class="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 rounded-lg p-6 border border-blue-200 dark:border-gray-600">
            <div class="flex items-start space-x-4">
                <!-- File Thumbnail/Icon -->
                <div class="flex-shrink-0">
                    @if (OriginalFile.FileType == FileType.Image)
                    {
                        <img src="/api/file/@(OriginalFile.Id)/thumbnail"
                             alt="@OriginalFile.Alt"
                             class="w-24 h-24 object-cover rounded-lg border border-white dark:border-gray-600 shadow-sm"
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        <div class="w-24 h-24 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center border border-gray-300 dark:border-gray-600" style="display: none;">
                            <i class="fas fa-image text-2xl text-gray-400"></i>
                        </div>
                    }
                    else
                    {
                        <div class="w-24 h-24 bg-white dark:bg-gray-700 rounded-lg flex items-center justify-center border border-gray-300 dark:border-gray-600 shadow-sm">
                            <i class="@StyleService.GetFileIcon(OriginalFile.FileType) text-2xl @StyleService.GetFileIconColor(OriginalFile.FileType)"></i>
                        </div>
                    }
                </div>

                <!-- File Info -->
                <div class="flex-1 min-w-0">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white truncate">
                        @OriginalFile.OriginalFileName
                    </h3>
                    <div class="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm">
                        <div class="space-y-1">
                            <div class="flex items-center text-gray-600 dark:text-gray-300">
                                <i class="fas fa-file-alt w-4 mr-2 text-blue-500"></i>
                                <span><strong>Type:</strong> @OriginalFile.ContentType</span>
                            </div>
                            <div class="flex items-center text-gray-600 dark:text-gray-300">
                                <i class="fas fa-weight-hanging w-4 mr-2 text-green-500"></i>
                                <span><strong>Size:</strong> @OriginalFile.FileSizeFormatted</span>
                            </div>
                            <div class="flex items-center text-gray-600 dark:text-gray-300">
                                <i class="fas fa-calendar w-4 mr-2 text-purple-500"></i>
                                <span><strong>Created:</strong> @OriginalFile.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                        </div>
                        <div class="space-y-1">
                            @if (OriginalFile.Width.HasValue && OriginalFile.Height.HasValue)
                            {
                                <div class="flex items-center text-gray-600 dark:text-gray-300">
                                    <i class="fas fa-expand-arrows-alt w-4 mr-2 text-orange-500"></i>
                                    <span><strong>Dimensions:</strong> @OriginalFile.Width × @OriginalFile.Height px</span>
                                </div>
                            }
                            @if (OriginalFile.Duration.HasValue)
                            {
                                <div class="flex items-center text-gray-600 dark:text-gray-300">
                                    <i class="fas fa-clock w-4 mr-2 text-red-500"></i>
                                    <span><strong>Duration:</strong> @FormatDuration(OriginalFile.Duration.Value)</span>
                                </div>
                            }
                            <div class="flex items-center text-gray-600 dark:text-gray-300">
                                <i class="fas fa-download w-4 mr-2 text-indigo-500"></i>
                                <span><strong>Downloads:</strong> @OriginalFile.DownloadCount</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


    <!-- Edit Form -->
    <div class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center">
            <i class="fas fa-edit text-blue-500 mr-2"></i>
            Edit File Information
        </h4>

        <div class="space-y-6">
            <!-- Basic Information -->
            <div class="grid grid-cols-1 gap-6">
                <!-- Description -->
                <div class="space-y-1">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        <i class="fas fa-align-left mr-2 text-gray-400"></i>
                        Description
                    </label>
                    <InputTextArea @bind-Value="Model.Description"
                                   class="@StyleService.GetFormInputClass(ValidationErrors.ContainsKey("Description"))"
                                   rows="3"
                                   placeholder="Enter a description for this file" />
                    @if (ValidationErrors.ContainsKey("Description"))
                    {
                        <div class="text-red-600 dark:text-red-400 text-sm mt-1 flex items-center">
                            <i class="fas fa-exclamation-circle mr-1"></i>
                            @ValidationErrors["Description"]
                        </div>
                    }
                </div>

                <!-- Alt Text (for images) -->
                @if (OriginalFile?.FileType == FileType.Image)
                {
                    <div class="space-y-1">
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            <i class="fas fa-eye mr-2 text-gray-400"></i>
                            Alt Text (Accessibility)
                        </label>
                        <InputText @bind-Value="Model.Alt"
                                   class="@StyleService.GetFormInputClass(ValidationErrors.ContainsKey("Alt"))"
                                   placeholder="Describe the image for accessibility" />
                        @if (ValidationErrors.ContainsKey("Alt"))
                        {
                            <div class="text-red-600 dark:text-red-400 text-sm mt-1 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                @ValidationErrors["Alt"]
                            </div>
                        }
                        <p class="text-sm text-gray-500 dark:text-gray-400">
                            Alternative text for screen readers and SEO
                        </p>
                    </div>
                }
            </div>

            <!-- Visibility Settings -->
            <div class="space-y-4">
                <h5 class="text-md font-medium text-gray-900 dark:text-white flex items-center">
                    <i class="fas fa-eye mr-2 text-gray-400"></i>
                    Visibility & Access
                </h5>

                <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <label class="flex items-center cursor-pointer">
                        <InputCheckbox @bind-Value="Model.IsPublic"
                                       id="isPublic"
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded" />
                        <div class="ml-3">
                            <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Public File</span>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Allow public access to this file without authentication</p>
                        </div>
                    </label>
                </div>
            </div>

            <!-- Tags -->
            <div class="space-y-4">
                <h5 class="text-md font-medium text-gray-900 dark:text-white flex items-center">
                    <i class="fas fa-tags mr-2 text-gray-400"></i>
                    Tags
                </h5>

                <!-- Current Tags -->
                @if (currentTags.Any())
                {
                    <div class="flex flex-wrap gap-2">
                        @foreach (var tag in currentTags)
                        {
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 border border-blue-200 dark:border-blue-700">
                                <i class="fas fa-tag mr-1 text-xs"></i>
                                @tag
                                <button type="button"
                                        @onclick="() => RemoveTag(tag)"
                                        class="ml-2 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200 transition-colors">
                                    <i class="fas fa-times text-xs"></i>
                                </button>
                            </span>
                        }
                    </div>
                }

                <!-- Add Tag -->
                <div class="flex space-x-2">
                    <div class="flex-1">
                        <input @bind="newTag"
                               @onkeyup="OnTagKeyUp"
                               type="text"
                               placeholder="Add a tag"
                               class="@StyleService.GetFormInputClass()" />
                    </div>
                    <button type="button"
                            @onclick="AddTag"
                            class="@StyleService.GetButtonClass("secondary", "medium")">
                        <i class="fas fa-plus mr-1"></i>
                        Add
                    </button>
                </div>
            </div>

            <!-- File Statistics -->
            @if (OriginalFile != null)
            {
                <div class="space-y-4">
                    <h5 class="text-md font-medium text-gray-900 dark:text-white flex items-center">
                        <i class="fas fa-chart-bar mr-2 text-gray-400"></i>
                        File Statistics
                    </h5>

                    <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
                        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div class="text-center">
                                <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">
                                    @OriginalFile.DownloadCount
                                </div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Downloads</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold @(OriginalFile.IsPublic ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400")">
                                    <i class="fas @(OriginalFile.IsPublic ? "fa-globe" : "fa-lock")"></i>
                                </div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">@(OriginalFile.IsPublic ? "Public" : "Private")</div>
                            </div>
                            <div class="text-center">
                                <div class="text-2xl font-bold text-purple-600 dark:text-purple-400">
                                    @OriginalFile.FileType
                                </div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Type</div>
                            </div>
                            <div class="text-center">
                                <div class="text-lg font-bold text-orange-600 dark:text-orange-400">
                                    @(OriginalFile.LastAccessedAt?.ToString("MMM dd") ?? "Never")
                                </div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">Last Access</div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public UpdateFileDto Model { get; set; } = new();
    [Parameter] public Dictionary<string, string> ValidationErrors { get; set; } = new();
    [Parameter] public FileDto? OriginalFile { get; set; }
    [Parameter] public List<FolderDto> FolderPath { get; set; } = new();

    private List<string> currentTags = new();
    private string newTag = string.Empty;

    protected override void OnParametersSet()
    {
        // Initialize tags from model
        if (Model.Tags?.Any() == true)
        {
            currentTags = Model.Tags.Select(kvp => kvp.Value?.ToString() ?? string.Empty)
                                  .Where(tag => !string.IsNullOrEmpty(tag))
                                  .ToList();
        }
    }

    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTag) && !currentTags.Contains(newTag.Trim(), StringComparer.OrdinalIgnoreCase))
        {
            currentTags.Add(newTag.Trim());
            UpdateModelTags();
            newTag = string.Empty;
            StateHasChanged();
        }
    }

    private void RemoveTag(string tag)
    {
        currentTags.Remove(tag);
        UpdateModelTags();
        StateHasChanged();
    }

    private void OnTagKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(newTag))
        {
            AddTag();
        }
    }

    private void UpdateModelTags()
    {
        Model.Tags = currentTags.Select((tag, index) => new KeyValuePair<string, object>($"tag_{index}", tag))
                               .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    private string GetFullPath()
    {
        if (OriginalFile == null) return "/";

        var pathParts = new List<string>();

        if (FolderPath?.Any() == true)
        {
            pathParts.AddRange(FolderPath.Select(f => f.Name));
        }
        else if (Model.FolderId.HasValue)
        {
            pathParts.Add($"[Folder-{Model.FolderId}]");
        }

        pathParts.Add(OriginalFile.OriginalFileName);

        return "/" + string.Join("/", pathParts);
    }

    private string GetFolderDisplayName()
    {
        if (FolderPath?.Any() == true)
        {
            return string.Join(" > ", FolderPath.Select(f => f.Name));
        }
        else if (Model.FolderId.HasValue)
        {
            return $"Folder ID: {Model.FolderId}";
        }
        return "Root Folder";
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", text);
        }
        catch (Exception)
        {
            // Handle silently
        }
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
        {
            return duration.ToString(@"h\:mm\:ss");
        }
        return duration.ToString(@"m\:ss");
    }
}