@page "/products/categories"
@using Backend.CMS.Application.DTOs
@using Frontend.Components.Categories
@using Frontend.Interfaces
@using Frontend.Components.Common
@using Frontend.Components.Files
@inject ICategoryService CategoryService
@inject IFileService FileService
@inject INotificationService NotificationService
@inject IStyleService StyleService

<PageTitle>Categories - CMS Designer</PageTitle>

<GenericCrudPage TListItem="CategoryDto"
                 TDetailItem="CategoryDto"
                 TCreateDto="CreateCategoryDto"
                 TUpdateDto="UpdateCategoryDto"
                 PageTitle="Categories"
                 EntitySingularName="Category"
                 EntityPluralName="Categories"
                 PageDescription="Manage product categories with hierarchical organization"
                 HeaderIcon="fas fa-tags"
                 DialogSize="xlarge"
                 ShowViewModeToggle="false"
                 EmptyStateIcon="fas fa-tags"
                 EmptyStateTitle="No categories found"
                 EmptyStateMessage="Create your first product category to get started"
                 LoadDataFunc="@LoadCategoriesAsync"
                 GetByIdFunc="@GetCategoryByIdAsync"
                 CreateFunc="@CreateCategoryAsync"
                 UpdateFunc="@UpdateCategoryAsync"
                 DeleteFunc="@DeleteCategoryAsync"
                 CreateModelFactory="@CreateModelFactory"
                 EditModelFactory="@EditModelFactory"
                 CreateToUpdateMapper="@CreateToUpdateMapper"
                 ValidateFunc="@ValidateCategoryAsync"
                 OnEntityCreated="@OnCategoryCreated"
                 OnEntityUpdated="@OnCategoryUpdated"
                 OnEntityDeleted="@OnCategoryDeleted">

    <TableColumns>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-image text-gray-400"></i>
                <span>Image</span>
            </div>
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-tag text-gray-400"></i>
                <span>Name</span>
            </div>
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-link text-gray-400"></i>
                <span>Slug</span>
            </div>
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-layer-group text-gray-400"></i>
                <span>Parent</span>
            </div>
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-box text-gray-400"></i>
                <span>Products</span>
            </div>
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-toggle-on text-gray-400"></i>
                <span>Status</span>
            </div>
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider bg-gray-50 dark:bg-gray-900">
            <div class="flex items-center space-x-1">
                <i class="fas fa-calendar text-gray-400"></i>
                <span>Created</span>
            </div>
        </th>
    </TableColumns>

    <RowTemplate Context="category">
        <!-- Image -->
        <td class="px-6 py-4 whitespace-nowrap">
            @if (!string.IsNullOrEmpty(category.FeaturedImageUrl))
            {
                <div class="w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-600">
                    <img src="@category.FeaturedImageUrl"
                         alt="@category.Name"
                         class="w-full h-full object-cover"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                    <div class="w-full h-full flex items-center justify-center" style="display: none;">
                        <i class="fas fa-image text-gray-400 text-xl"></i>
                    </div>
                </div>
            }
            else
            {
                <div class="w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center border border-gray-200 dark:border-gray-600">
                    <i class="fas fa-image text-gray-400 text-xl"></i>
                </div>
            }
        </td>

        <!-- Name -->
        <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
                <div class="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center mr-3">
                    <i class="fas fa-tag text-white text-sm"></i>
                </div>
                <div>
                    <div class="text-sm font-medium text-gray-900 dark:text-white">
                        @category.Name
                    </div>
                    @if (!string.IsNullOrEmpty(category.ShortDescription))
                    {
                        <div class="text-xs text-gray-500 dark:text-gray-400 truncate max-w-xs">
                            @category.ShortDescription
                        </div>
                    }
                </div>
            </div>
        </td>

        <!-- Slug -->
        <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                @category.Slug
            </span>
        </td>

        <!-- Parent Category -->
        <td class="px-6 py-4 whitespace-nowrap">
            @if (!string.IsNullOrEmpty(category.ParentCategoryName))
            {
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                    <i class="fas fa-layer-group mr-1"></i>
                    @category.ParentCategoryName
                </span>
            }
            else
            {
                <span class="text-sm text-gray-500 dark:text-gray-400">Root Category</span>
            }
        </td>

        <!-- Product Count -->
        <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">
                    <i class="fas fa-box mr-1"></i>
                    @category.ProductCount
                </span>
                @if (category.SubCategories.Any())
                {
                    <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200">
                        <i class="fas fa-sitemap mr-1"></i>
                        @category.SubCategories.Count subs
                    </span>
                }
            </div>
        </td>

        <!-- Status -->
        <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex flex-col space-y-1">
                @if (category.IsActive)
                {
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">
                        <i class="fas fa-check-circle mr-1"></i>
                        Active
                    </span>
                }
                else
                {
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200">
                        <i class="fas fa-times-circle mr-1"></i>
                        Inactive
                    </span>
                }

                @if (category.IsVisible)
                {
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                        <i class="fas fa-eye mr-1"></i>
                        Visible
                    </span>
                }
                else
                {
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                        <i class="fas fa-eye-slash mr-1"></i>
                        Hidden
                    </span>
                }
            </div>
        </td>

        <!-- Created Date -->
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
            <div class="flex flex-col">
                <span>@category.CreatedAt.ToString("MMM dd, yyyy")</span>
                <span class="text-xs">@category.CreatedAt.ToString("h:mm tt")</span>
            </div>
        </td>
    </RowTemplate>

    <FilterContent>
        <div class="flex items-center space-x-3">
            <!-- Status Filter -->
            <div class="flex items-center space-x-2">
                <label class="text-sm font-medium text-gray-700 dark:text-gray-300">Status:</label>
                <select @bind="StatusFilter"
                        class="@StyleService.GetFormSelectClass() text-sm">
                    <option value="">All</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                </select>
            </div>

            <!-- Visibility Filter -->
            <div class="flex items-center space-x-2">
                <label class="text-sm font-medium text-gray-700 dark:text-gray-300">Visibility:</label>
                <select @bind="VisibilityFilter"
                        class="@StyleService.GetFormSelectClass() text-sm">
                    <option value="">All</option>
                    <option value="visible">Visible</option>
                    <option value="hidden">Hidden</option>
                </select>
            </div>

            <!-- Parent Filter -->
            <div class="flex items-center space-x-2">
                <label class="text-sm font-medium text-gray-700 dark:text-gray-300">Level:</label>
                <select @bind="ParentFilter"
                        class="@StyleService.GetFormSelectClass() text-sm">
                    <option value="">All</option>
                    <option value="root">Root Only</option>
                    <option value="sub">Sub-categories Only</option>
                </select>
            </div>
        </div>
    </FilterContent>


    <FormContent Context="formContext">
        <CategoryForm Model="@((CreateCategoryDto)formContext.Model)"
                      ValidationErrors="@formContext.ValidationErrors"
                      IsEditMode="@formContext.IsEditMode" />
    </FormContent>

</GenericCrudPage>

@code {
    private string statusFilter = string.Empty;
    private string visibilityFilter = string.Empty;
    private string parentFilter = string.Empty;
    private bool ignoreFiltersOnNextLoad = false;
    private string StatusFilter
    {
        get => statusFilter;
        set
        {
            if (statusFilter != value)
            {
                statusFilter = value;
                OnFilterChanged();
            }
        }
    }
    private string VisibilityFilter
    {
        get => visibilityFilter;
        set
        {
            if (visibilityFilter != value)
            {
                visibilityFilter = value;
                OnFilterChanged();
            }
        }
    }

    private string ParentFilter
    {
        get => parentFilter;
        set
        {
            if (parentFilter != value)
            {
                parentFilter = value;
                OnFilterChanged();
            }
        }
    }
    private async Task<PagedResult<CategoryDto>> LoadCategoriesAsync(int page, int pageSize, string? search)
    {
        var searchDto = new CategorySearchDto
        {
            SearchTerm = search,
            PageNumber = page,
            PageSize = pageSize,
            SortBy = "Name",
            SortDirection = "Asc"
        };

        // Apply filters only if not ignoring them
        if (!ignoreFiltersOnNextLoad)
        {
            if (!string.IsNullOrEmpty(statusFilter))
            {
                searchDto.IsActive = statusFilter == "active";
            }

            if (!string.IsNullOrEmpty(visibilityFilter))
            {
                searchDto.IsVisible = visibilityFilter == "visible";
            }

            if (!string.IsNullOrEmpty(parentFilter))
            {
                searchDto.ParentCategoryId = parentFilter == "root" ? null : (parentFilter == "sub" ? -1 : null);
            }
        }
        else
        {
            // Reset the flag after use
            ignoreFiltersOnNextLoad = false;
        }

        return await CategoryService.GetCategoriesAsync(searchDto);
    }

    private async Task<CategoryDto?> GetCategoryByIdAsync(int id)
    {
        return await CategoryService.GetCategoryByIdAsync(id);
    }

    private async Task<CategoryDto?> CreateCategoryAsync(CreateCategoryDto createDto)
    {
        return await CategoryService.CreateCategoryAsync(createDto);
    }

    private async Task<CategoryDto?> UpdateCategoryAsync(int id, UpdateCategoryDto updateDto)
    {
        return await CategoryService.UpdateCategoryAsync(id, updateDto);
    }

    private async Task<bool> DeleteCategoryAsync(int id)
    {
        return await CategoryService.DeleteCategoryAsync(id);
    }

    private CreateCategoryDto CreateModelFactory()
    {
        return new CreateCategoryDto
        {
            IsActive = true,
            IsVisible = true,
            SortOrder = 0
        };
    }

    private CreateCategoryDto EditModelFactory(CategoryDto category)
    {
        return new CreateCategoryDto
        {
            Name = category.Name,
            Slug = category.Slug,
            Description = category.Description,
            ShortDescription = category.ShortDescription,
            ParentCategoryId = category.ParentCategoryId,
            IsActive = category.IsActive,
            IsVisible = category.IsVisible,
            SortOrder = category.SortOrder,
            MetaTitle = category.MetaTitle,
            MetaDescription = category.MetaDescription,
            MetaKeywords = category.MetaKeywords,
            CustomFields = category.CustomFields,
            Images = category.Images.Select(img => new CreateCategoryImageDto
            {
                FileId = img.FileId,
                Alt = img.Alt,
                Caption = img.Caption,
                Position = img.Position,
                IsFeatured = img.IsFeatured
            }).ToList()
        };
    }

    private UpdateCategoryDto CreateToUpdateMapper(CreateCategoryDto createDto)
    {
        return new UpdateCategoryDto
        {
            Name = createDto.Name,
            Slug = createDto.Slug,
            Description = createDto.Description,
            ShortDescription = createDto.ShortDescription,
            ParentCategoryId = createDto.ParentCategoryId,
            IsActive = createDto.IsActive,
            IsVisible = createDto.IsVisible,
            SortOrder = createDto.SortOrder,
            MetaTitle = createDto.MetaTitle,
            MetaDescription = createDto.MetaDescription,
            MetaKeywords = createDto.MetaKeywords,
            CustomFields = createDto.CustomFields,
            Images = createDto.Images.Select(img => new UpdateCategoryImageDto
            {
                Id = 0, // Will be set by the backend for new images
                FileId = img.FileId,
                Alt = img.Alt,
                Caption = img.Caption,
                Position = img.Position,
                IsFeatured = img.IsFeatured
            }).ToList()
        };
    }

    private async Task<Dictionary<string, string>> ValidateCategoryAsync(CreateCategoryDto model, bool isEdit)
    {
        var errors = new Dictionary<string, string>();

        // Only basic required field validation - let backend handle business logic
        if (string.IsNullOrWhiteSpace(model.Name))
        {
            errors["Name"] = "Category name is required.";
        }

        if (string.IsNullOrWhiteSpace(model.Slug))
        {
            errors["Slug"] = "Category slug is required.";
        }

        return errors;
    }

    private async Task OnFilterChanged()
    {
        StateHasChanged();
    }

    private async Task OnCategoryCreated(CategoryDto category)
    {
        // Set flag to ignore filters on next load
        ignoreFiltersOnNextLoad = true;

        // Clear all filters for future loads
        statusFilter = string.Empty;
        visibilityFilter = string.Empty;
        parentFilter = string.Empty;

        // Show success message
        NotificationService.ShowSuccess($"Category '{category.Name}' created successfully!");

        // The GenericCrudPage will call LoadData automatically after this
        // The ignoreFiltersOnNextLoad flag will ensure new category is visible
    }

    private async Task OnCategoryUpdated(CategoryDto category)
    {
        // Set flag to ignore filters on next load
        ignoreFiltersOnNextLoad = true;

        // Clear filters to ensure updated category is visible
        statusFilter = string.Empty;
        visibilityFilter = string.Empty;
        parentFilter = string.Empty;

        NotificationService.ShowSuccess($"Category '{category.Name}' updated successfully!");
    }

    private Task OnCategoryDeleted(int categoryId)
    {
        NotificationService.ShowSuccess("Category deleted successfully!");
        return Task.CompletedTask;
    }
}