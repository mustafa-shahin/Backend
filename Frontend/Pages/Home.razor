@page "/"
@using Backend.CMS.Application.DTOs
@using Frontend.Interface
@using Frontend.Interfaces
@using Frontend.Services
@inject IPageService PageService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IStyleService StyleService
<PageTitle>Dashboard - CMS Designer</PageTitle>

<div class="space-y-8">
    <!-- Welcome Section -->
    <div class="bg-gradient-to-r from-blue-600 to-blue-700 dark:from-blue-700 dark:to-blue-800 rounded-xl shadow-lg p-8 text-white">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold mb-2">
                    Welcome back, @(currentUser?.FirstName ?? "Admin")! 👋
                </h1>
                <p class="text-blue-100 text-lg">
                    Ready to create something amazing today?
                </p>
            </div>
            <div class="hidden md:block">
                <div class="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center">
                    <i class="fas fa-palette text-2xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        @foreach (var stat in statCards)
        {
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 hover:shadow-md transition-shadow">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                            @stat.Name
                        </p>
                        <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">
                            @stat.Value
                        </p>
                        <div class="flex items-center mt-2">
                            <span class="@GetChangeClass(stat.ChangeType) text-xs font-medium">
                                @GetChangeIcon(stat.ChangeType)
                                @stat.Change this week
                            </span>
                        </div>
                    </div>
                    <div class="@GetStatIconContainerClass(stat.Color)">
                        <i class="@stat.Icon @GetStatIconClass(stat.Color) text-xl"></i>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Quick Actions and Recent Pages -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        
        <!-- Quick Actions Card -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
            <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
                    Quick Actions
                </h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">
                    Jump into the most common tasks
                </p>
            </div>
            <div class="grid grid-cols-1 gap-1">
                @foreach (var action in quickActions)
                {
                    @if (action.CanAccess)
                    {
                        <button @onclick="@(() => NavigateToAction(action.Action))" 
                                class="group p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors text-left">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <div class="@GetActionIconContainerClass(action.Color)">
                                        <i class="@action.Icon @GetActionIconClass(action.Color) text-2xl"></i>
                                    </div>
                                    <div class="ml-4">
                                        <h3 class="font-medium text-gray-900 dark:text-gray-100">
                                            @action.Name
                                        </h3>
                                        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                            @action.Description
                                        </p>
                                    </div>
                                </div>
                                <i class="fas fa-arrow-right text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors"></i>
                            </div>
                        </button>
                    }
                    else
                    {
                        <div class="p-6 opacity-50 cursor-not-allowed">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <div class="@GetActionIconContainerClass(action.Color)">
                                        <i class="@action.Icon @GetActionIconClass(action.Color) text-2xl"></i>
                                    </div>
                                    <div class="ml-4">
                                        <h3 class="font-medium text-gray-900 dark:text-gray-100">
                                            @action.Name
                                        </h3>
                                        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                            @action.Description
                                        </p>
                                    </div>
                                </div>
                                <span class="text-xs text-gray-500">Soon</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Recent Pages -->
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
            <div class="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
                <div>
                    <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
                        Recent Pages
                    </h2>
                    <p class="text-gray-600 dark:text-gray-400 mt-1">
                        Your latest page updates
                    </p>
                </div>
                <button @onclick="GoToPages" 
                        class="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 text-sm font-medium">
                    View all →
                </button>
            </div>
            <div class="divide-y divide-gray-200 dark:divide-gray-700">
                @if (isLoading)
                {
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="p-6 animate-pulse">
                            <div class="flex items-center justify-between">
                                <div class="flex-1">
                                    <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
                                    <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                                </div>
                                <div class="w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded"></div>
                            </div>
                        </div>
                    }
                }
                else if (recentPages.Any())
                {
                    @foreach (var page in recentPages.Take(5))
                    {
                        <div class="p-6 hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                            <div class="flex items-center justify-between">
                                <div class="flex-1">
                                    <div class="flex items-center space-x-3">
                                        <h3 class="font-medium text-gray-900 dark:text-gray-100">
                                            @(page.Name)
                                        </h3>
                                        <span class="@StyleService.GetStatusBadgeClasses(page.Status)">
                                            @StyleService.GetStatusText(page.Status)
                                        </span>
                                    </div>
                                    <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                        @(page.Title)
                                    </p>
                                    <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">
                                        Updated @(page.UpdatedAt.ToString("MMM dd, yyyy"))
                                    </p>
                                </div>
                                <div class="flex items-center space-x-2">
                                    <button @onclick="@(() => EditPage(page.Id))" 
                                            class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 bg-blue-50 dark:bg-blue-900/30 rounded-md hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors">
                                        <i class="fas fa-edit mr-1.5"></i>
                                        Edit
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="p-12 text-center">
                        <div class="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-file-alt text-gray-400 text-xl"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                            No pages yet
                        </h3>
                        <p class="text-gray-600 dark:text-gray-400 mb-6">
                            Create your first page to get started with your website.
                        </p>
                        <button @onclick="CreateNewPage" 
                                class="btn-primary dark:text-white">
                            <i class="fas fa-plus mr-2"></i>
                            Create First Page
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Backend.CMS.Application.DTOs.UserDto? currentUser;
    private List<PageListDto> recentPages = new();
    private bool isLoading = true;

    private List<StatCard> statCards = new();
    private List<QuickAction> quickActions = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        await LoadDashboardData();
        InitializeStatCards();
        InitializeQuickActions();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            var pagesResult = await PageService.GetPagesAsync(1, 20);
            recentPages = pagesResult.Data.OrderByDescending(p => p.UpdatedAt).ToList();
            
            // Update stat cards with real data
            UpdateStatCards(pagesResult);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeStatCards()
    {
        statCards = new List<StatCard>
        {
            new StatCard { Name = "Total Pages", Value = "0", Icon = "fas fa-file-alt", Color = "blue", Change = "+2", ChangeType = "increase" },
            new StatCard { Name = "Published", Value = "0", Icon = "fas fa-globe", Color = "green", Change = "+1", ChangeType = "increase" },
            new StatCard { Name = "Drafts", Value = "0", Icon = "fas fa-edit", Color = "yellow", Change = "+1", ChangeType = "increase" },
            new StatCard { Name = "Users", Value = "24", Icon = "fas fa-users", Color = "purple", Change = "0", ChangeType = "neutral" }
        };
    }

    private void InitializeQuickActions()
    {
        quickActions = new List<QuickAction>
        {
            new QuickAction 
            { 
                Name = "Create New Page", 
                Description = "Start building a new page with our visual designer",
                Icon = "fas fa-plus", 
                Color = "blue", 
                Action = "create-page",
                CanAccess = true
            },
            new QuickAction 
            { 
                Name = "Manage Pages", 
                Description = "View, edit, and organize all your pages",
                Icon = "fas fa-list", 
                Color = "green", 
                Action = "manage-pages",
                CanAccess = true
            },
            new QuickAction 
            { 
                Name = "Media Library", 
                Description = "Upload and manage your media files",
                Icon = "fas fa-images", 
                Color = "orange", 
                Action = "media",
                CanAccess = false
            },
            new QuickAction 
            { 
                Name = "Settings", 
                Description = "Configure your site settings",
                Icon = "fas fa-cog", 
                Color = "gray", 
                Action = "settings",
                CanAccess = false
            }
        };
    }

    private void UpdateStatCards(PagedResult<PageListDto> pagesResult)
    {
        var totalPages = pagesResult.TotalCount;
        var publishedPages = recentPages.Count(p => p.Status == Backend.CMS.Domain.Enums.PageStatus.Published);
        var draftPages = recentPages.Count(p => p.Status == Backend.CMS.Domain.Enums.PageStatus.Draft);

        statCards[0].Value = totalPages.ToString();
        statCards[1].Value = publishedPages.ToString();
        statCards[2].Value = draftPages.ToString();
    }

    private void NavigateToAction(string action)
    {
        switch (action)
        {
            case "create-page":
                CreateNewPage();
                break;
            case "manage-pages":
                GoToPages();
                break;
            case "media":
                Navigation.NavigateTo("/media");
                break;
            case "settings":
                Navigation.NavigateTo("/settings");
                break;
        }
    }

    private void CreateNewPage()
    {
        Navigation.NavigateTo("/pages?action=create");
    }

    private void GoToPages()
    {
        Navigation.NavigateTo("/pages");
    }

    private void EditPage(int pageId)
    {
        Navigation.NavigateTo($"/pages?action=edit&id={pageId}");
    }

    // Helper Methods for Styling
    private string GetChangeClass(string changeType)
    {
        return changeType switch
        {
            "increase" => "text-green-600 dark:text-green-400",
            "decrease" => "text-red-600 dark:text-red-400",
            _ => "text-gray-600 dark:text-gray-400"
        };
    }

    private string GetChangeIcon(string changeType)
    {
        return changeType switch
        {
            "increase" => "↗ ",
            "decrease" => "↘ ",
            _ => ""
        };
    }

    private string GetStatIconContainerClass(string color)
    {
        return $"p-3 rounded-xl bg-{color}-100 dark:bg-{color}-900/30";
    }

    private string GetStatIconClass(string color)
    {
        return $"text-{color}-600 dark:text-{color}-400";
    }

    private string GetActionIconContainerClass(string color)
    {
        return $"inline-flex p-4 rounded-xl bg-{color}-100 dark:bg-{color}-900/30 group-hover:bg-{color}-200 dark:group-hover:bg-{color}-800/50 transition-colors";
    }

    private string GetActionIconClass(string color)
    {
        return $"text-{color}-600 dark:text-{color}-400";
    }


    // Data Models
    private class StatCard
    {
        public string Name { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
        public string Change { get; set; } = string.Empty;
        public string ChangeType { get; set; } = string.Empty;
    }

    private class QuickAction
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
        public string Action { get; set; } = string.Empty;
        public bool CanAccess { get; set; }
    }
}