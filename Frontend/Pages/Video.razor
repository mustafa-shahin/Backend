@page "/media/videos"
@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@using Frontend.Interface
@using Frontend.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Internal
@inject IFileService FileService
@inject IFolderService FolderService
@inject INotificationService NotificationService
@inject IStyleService StyleService
@inject NavigationManager Navigation

<PageTitle>Videos - Media Library</PageTitle>

<!-- Page Header -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 space-y-4 sm:space-y-0">
    <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
            <i class="fas fa-video mr-3 text-blue-600 dark:text-blue-400"></i>
            Videos
        </h1>
        <p class="text-gray-600 dark:text-gray-400 mt-1">Manage your video files</p>
    </div>
    <div class="flex items-center space-x-3">
        <button @onclick="ShowUploadDialog" class="@StyleService.GetButtonClass("primary")">
            <i class="fas fa-upload mr-2"></i>
            Upload Videos
        </button>
    </div>
</div>

<!-- Breadcrumbs -->
@if (breadcrumbs.Any())
{
    <div class="mb-6">
        <nav class="flex items-center space-x-2 text-sm">
            <button @onclick="() => NavigateToFolder(null)" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
                <i class="fas fa-home mr-1"></i>
                Root
            </button>
            @foreach (var folder in breadcrumbs)
            {
                <i class="fas fa-chevron-right text-gray-400 mx-2"></i>
                <button @onclick="() => NavigateToFolder(folder.Id)" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
                    @folder.Name
                </button>
            }
        </nav>
    </div>
}

<!-- Search and Filters -->
<div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden mb-6">
    <div class="p-6">
        <div class="flex flex-col lg:flex-row gap-4">
            <!-- Search -->
            <div class="flex-1">
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-search text-gray-400"></i>
                    </div>
                    <input @bind="searchTerm" @bind:event="oninput" @onkeyup="OnSearchKeyUp"
                           type="text"
                           placeholder="Search videos..."
                           class="@StyleService.GetFormInputClass() pl-10" />
                </div>
            </div>

            <!-- Folder Filter -->
            <div class="flex items-center space-x-3">
                <select @bind="selectedFolderId" @bind:after="OnFolderChange" class="@StyleService.GetFormInputClass()">
                    <option value="">All Folders</option>
                    @foreach (var folder in allFolders)
                    {
                        <option value="@folder.Id">@GetFolderPath(folder)</option>
                    }
                </select>

                <!-- View Mode Toggle -->
                <div class="flex rounded-lg shadow-sm">
                    <button @onclick="() => SetViewMode(ViewMode.Grid)"
                            class="@StyleService.GetViewModeToggleClass(currentViewMode == ViewMode.Grid) rounded-r-none border-r-0">
                        <i class="fas fa-th mr-1"></i>
                        Grid
                    </button>
                    <button @onclick="() => SetViewMode(ViewMode.List)"
                            class="@StyleService.GetViewModeToggleClass(currentViewMode == ViewMode.List) rounded-l-none">
                        <i class="fas fa-list mr-1"></i>
                        List
                    </button>
                </div>

                <button @onclick="RefreshData"
                        class="@StyleService.GetButtonClass("secondary")"
                        title="Refresh"
                        disabled="@isLoading">
                    <i class="fas fa-refresh @(isLoading ? "fa-spin" : "")"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Content Area -->
<div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
    @if (isLoading)
    {
        <div class="p-6">
            <div class="flex items-center justify-center py-12">
                <div class="text-center">
                    <div class="@StyleService.GetLoadingSpinnerClass("large") mx-auto mb-4"></div>
                    <p class="text-gray-500 dark:text-gray-400">Loading videos...</p>
                </div>
            </div>
        </div>
    }
    else if (files.Items?.Any() == true)
    {
        @if (currentViewMode == ViewMode.Grid)
        {
            <!-- Grid View -->
            <div class="p-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    @foreach (var file in files.Items)
                    {
                        <div class="bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-lg transition-all duration-200 overflow-hidden group cursor-pointer border border-gray-200 dark:border-gray-700">
                            <!-- Video Thumbnail -->
                            <div class="relative aspect-video bg-gray-100 dark:bg-gray-700 flex items-center justify-center overflow-hidden">
                                <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-blue-600">
                                    <i class="fas fa-video text-white text-4xl"></i>
                                </div>

                                <!-- File type badge -->
                                <div class="absolute top-2 left-2">
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                                        @file.FileExtension.Replace(".", "").ToUpper()
                                    </span>
                                </div>

                                <!-- Duration badge -->
                                @if (file.Duration.HasValue)
                                {
                                    <div class="absolute bottom-2 right-2">
                                        <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-black/70 text-white">
                                            @FormatDuration(file.Duration.Value)
                                        </span>
                                    </div>
                                }

                                <!-- Visibility indicator -->
                                <div class="absolute top-2 right-2">
                                    @if (file.IsPublic)
                                    {
                                        <span class="inline-flex items-center p-1 rounded-full bg-green-100/90 dark:bg-green-900/90 text-green-600 dark:text-green-400" title="Public">
                                            <i class="fas fa-globe text-xs"></i>
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex items-center p-1 rounded-full bg-gray-100/90 dark:bg-gray-700/90 text-gray-600 dark:text-gray-400" title="Private">
                                            <i class="fas fa-lock text-xs"></i>
                                        </span>
                                    }
                                </div>

                                <!-- Actions overlay -->
                                <div class="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-all duration-200 flex items-center justify-center space-x-2">
                                    <button @onclick="() => PreviewFile(file)"
                                            class="p-2 bg-white/20 hover:bg-white/30 rounded-full text-white transition-colors"
                                            title="Preview">
                                        <i class="fas fa-play"></i>
                                    </button>

                                    <button @onclick="() => DownloadFile(file)"
                                            class="p-2 bg-white/20 hover:bg-white/30 rounded-full text-white transition-colors"
                                            title="Download">
                                        <i class="fas fa-download"></i>
                                    </button>

                                    <button @onclick="() => ShowEditFileDialog(file)"
                                            class="p-2 bg-white/20 hover:bg-white/30 rounded-full text-white transition-colors"
                                            title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>

                                    <button @onclick="() => ShowDeleteFileConfirmation(file)"
                                            class="p-2 bg-red-500/80 hover:bg-red-500 rounded-full text-white transition-colors"
                                            title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Video Info -->
                            <div class="p-4">
                                <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate mb-1"
                                    title="@file.OriginalFileName">
                                    @file.OriginalFileName
                                </h4>

                                <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 mb-2">
                                    <span>@FormatFileSize(file.FileSize)</span>
                                    <span>@file.CreatedAt.ToString("MMM dd")</span>
                                </div>

                                @if (file.Width.HasValue && file.Height.HasValue)
                                {
                                    <div class="flex items-center text-xs text-gray-500 dark:text-gray-400 mb-2">
                                        <i class="fas fa-expand-arrows-alt mr-1"></i>
                                        <span>@file.Width × @file.Height</span>
                                    </div>
                                }

                                <!-- File path -->
                                <div class="text-xs text-gray-400 dark:text-gray-500 mb-2 font-mono truncate" title="@GetFullPath(file)">
                                    @GetFullPath(file)
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <!-- List View -->
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-900">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Video</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Size</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Duration</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Resolution</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Path</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Modified</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider text-right">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        @foreach (var file in files.Items)
                        {
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="w-16 h-12 rounded overflow-hidden bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center">
                                        <i class="fas fa-video text-white"></i>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900 dark:text-white">@file.OriginalFileName</div>
                                    <div class="text-sm text-gray-500 dark:text-gray-400">@file.FileExtension.ToUpper()</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                    @FormatFileSize(file.FileSize)
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                    @if (file.Duration.HasValue)
                                    {
                                        <span>@FormatDuration(file.Duration.Value)</span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">—</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                    @if (file.Width.HasValue && file.Height.HasValue)
                                    {
                                        <span>@file.Width × @file.Height</span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">—</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 font-mono">
                                    @GetFullPath(file)
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                    @file.UpdatedAt.ToString("MMM dd, yyyy HH:mm")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 text-right">
                                    <div class="flex items-center justify-end space-x-2">
                                        <button @onclick="() => PreviewFile(file)"
                                                class="@StyleService.GetTableActionButtonClass("view")"
                                                title="Preview">
                                            <i class="fas fa-play"></i>
                                        </button>
                                        <button @onclick="() => DownloadFile(file)"
                                                class="@StyleService.GetTableActionButtonClass()"
                                                title="Download">
                                            <i class="fas fa-download"></i>
                                        </button>
                                        <button @onclick="() => ShowEditFileDialog(file)"
                                                class="@StyleService.GetTableActionButtonClass("edit")"
                                                title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button @onclick="() => ShowDeleteFileConfirmation(file)"
                                                class="@StyleService.GetTableActionButtonClass("delete")"
                                                title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <!-- Empty State -->
        <div class="p-6">
            <div class="text-center py-12">
                <div class="mx-auto w-16 h-16 text-gray-400 dark:text-gray-500 mb-4">
                    <i class="fas fa-video text-4xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                    No videos found
                </h3>
                <p class="text-gray-500 dark:text-gray-400 mb-6">
                    Upload your first video to get started.
                </p>
                <button @onclick="ShowUploadDialog" class="@StyleService.GetButtonClass("primary")">
                    <i class="fas fa-upload mr-2"></i>
                    Upload Videos
                </button>
            </div>
        </div>
    }
</div>

<!-- Pagination -->
@if (files.TotalCount > 0 && totalPages > 1)
{
    <div class="mt-6">
        <Pagination CurrentPage="@currentPage"
                    TotalPages="@totalPages"
                    TotalItems="@files.TotalCount"
                    OnPageChanged="@OnPageChanged"
                    IsLoading="@isLoading" />
    </div>
}

<!-- Edit File Dialog -->
<FormDialog @ref="fileDialog"
            Title="Edit Video"
            Description="Update video information and metadata"
            HeaderIcon="fas fa-edit"
            IsVisible="@showFileDialog"
            IsSaving="@isSaving"
            Size="large"
            Model="@fileModel"
            ValidationErrors="@fileValidationErrors"
            IsEditMode="true"
            OnClose="@CloseFileDialog"
            OnSave="@SaveFile"
            CloseOnBackdrop="false">

    <FormContent Context="context">
        <FileEditForm Model="@((UpdateFileDto)context.Model)"
                      ValidationErrors="@context.ValidationErrors"
                      OriginalFile="@selectedFile" />
    </FormContent>
</FormDialog>

<!-- Upload Files Dialog -->
<GenericDialog @ref="uploadDialog"
               Title="Upload Videos"
               Description="Upload new video files"
               HeaderIcon="fas fa-upload"
               IsVisible="@showUploadDialog"
               OnClose="@CloseUploadDialog"
               OnSave="@UploadFiles"
               IsSaving="@isUploading"
               SaveText="Upload"
               SavingText="Uploading..."
               Size="large">

    <BodyContent>
        <FileUpload @ref="fileUpload"
                    Files="@selectedFiles"
                    FilesChanged="@OnFilesChanged"
                    UploadProgress="@uploadProgress"
                    UploadProgressChanged="@OnUploadProgressChanged"
                    IsUploading="@isUploading"
                    FolderId="@GetCurrentFolderId()" />
    </BodyContent>
</GenericDialog>>

<!-- File Preview Dialog -->
<FilePreview @ref="filePreview" OnDownloadFile="@DownloadFile" />

<!-- Delete Confirmation -->
<ConfirmationDialog @ref="deleteFileDialog"
                    Title="Delete Video"
                    Message="Are you sure you want to delete this video? This action cannot be undone."
                    ConfirmText="Delete"
                    ConfirmClass="@StyleService.GetButtonClass("danger")"
                    ConfirmIcon="fas fa-trash"
                    OnConfirm="@DeleteFile" />

@code {
    public enum ViewMode { Grid, List }

    // Data
    private PagedResult<FileDto> files = new();
    private List<FolderDto> allFolders = new();
    private List<FolderDto> breadcrumbs = new();
    private string selectedFolderId = string.Empty;

    // Loading states
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isUploading = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 0;

    // Filters and search
    private string searchTerm = string.Empty;
    private Timer? searchTimer;
    private ViewMode currentViewMode = ViewMode.Grid;

    // Dialog states
    private bool showFileDialog = false;
    private bool showUploadDialog = false;
    private FileDto? selectedFile = null;

    // Form models and validation
    private UpdateFileDto fileModel = new();
    private Dictionary<string, string> fileValidationErrors = new();

    // Upload
    private List<IBrowserFile> selectedFiles = new();
    private Dictionary<string, int> uploadProgress = new();

    // Component references
    private FormDialog? fileDialog;
    private GenericDialog? uploadDialog;
    private ConfirmationDialog? deleteFileDialog;
    private FileUpload? fileUpload;
    private FilePreview? filePreview;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        selectedFolderId = query["folderId"] ?? string.Empty;

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            allFolders = await GetAllFoldersFlat();

            int? folderId = null;
            if (!string.IsNullOrEmpty(selectedFolderId) && int.TryParse(selectedFolderId, out var folderIdInt))
            {
                folderId = folderIdInt;
            }

            files = await FileService.GetFilesAsync(currentPage, pageSize, folderId,
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm, FileType.Video);
            totalPages = (int)Math.Ceiling((double)files.TotalCount / pageSize);

            if (folderId.HasValue)
            {
                breadcrumbs = await FolderService.GetFolderBreadcrumbsAsync(folderId.Value);
            }
            else
            {
                breadcrumbs.Clear();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to load videos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<List<FolderDto>> GetAllFoldersFlat()
    {
        try
        {
            var folders = new List<FolderDto>();
            await GetFoldersRecursive(null, folders, "");
            return folders;
        }
        catch
        {
            return new List<FolderDto>();
        }
    }

    private async Task GetFoldersRecursive(int? parentId, List<FolderDto> result, string path)
    {
        var folders = await FolderService.GetFoldersAsync(parentId);
        foreach (var folder in folders)
        {
            var folderPath = string.IsNullOrEmpty(path) ? folder.Name : $"{path}/{folder.Name}";
            result.Add(new FolderDto
            {
                Id = folder.Id,
                Name = folder.Name,
                Path = folderPath,
                Description = folder.Description
            });
            await GetFoldersRecursive(folder.Id, result, folderPath);
        }
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            currentPage = 1;
            await InvokeAsync(LoadData);
        }, null, 500, Timeout.Infinite);
    }

    private async Task OnFolderChange()
    {
        currentPage = 1;

        var url = "/media/videos";
        if (!string.IsNullOrEmpty(selectedFolderId))
        {
            url += $"?folderId={selectedFolderId}";
        }
        Navigation.NavigateTo(url, false);

        await LoadData();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadData();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void SetViewMode(ViewMode mode)
    {
        currentViewMode = mode;
        StateHasChanged();
    }

    private async Task NavigateToFolder(int? folderId)
    {
        selectedFolderId = folderId?.ToString() ?? string.Empty;
        currentPage = 1;

        var url = "/media/videos";
        if (folderId.HasValue)
        {
            url += $"?folderId={folderId}";
        }
        Navigation.NavigateTo(url, false);

        await LoadData();
    }

    // File Management
    private async Task ShowEditFileDialog(FileDto file)
    {
        selectedFile = file;
        fileModel = new UpdateFileDto
        {
            Description = file.Description,
            Alt = file.Alt,
            IsPublic = file.IsPublic,
            FolderId = file.FolderId,
            Tags = file.Tags ?? new Dictionary<string, object>()
        };
        fileValidationErrors.Clear();
        showFileDialog = true;
        StateHasChanged();
    }

    private void CloseFileDialog()
    {
        showFileDialog = false;
        fileModel = new UpdateFileDto();
        selectedFile = null;
        fileValidationErrors.Clear();
        StateHasChanged();
    }

    private async Task SaveFile()
    {
        if (isSaving || selectedFile == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            await FileService.UpdateFileAsync(selectedFile.Id, fileModel);
            NotificationService.ShowSuccess("Video updated successfully");

            CloseFileDialog();

            // Force immediate refresh
            isSaving = false;
            StateHasChanged();
            await ForceRefreshData();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to save video: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowDeleteFileConfirmation(FileDto file)
    {
        selectedFile = file;
        deleteFileDialog?.Show();
    }

    private async Task DeleteFile()
    {
        if (selectedFile == null) return;

        try
        {
            await FileService.DeleteFileAsync(selectedFile.Id);
            NotificationService.ShowSuccess("Video deleted successfully");

            // Force immediate refresh
            await ForceRefreshData();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to delete video: {ex.Message}");
        }
    }

    private async Task PreviewFile(FileDto file)
    {
        filePreview?.ShowPreview(file);
    }

    private async Task DownloadFile(FileDto file)
    {
        try
        {
            await FileService.DownloadFileAsync(file.Id);
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to download video: {ex.Message}");
        }
    }

    // Upload Management
    private void ShowUploadDialog()
    {
        selectedFiles.Clear();
        uploadProgress.Clear();
        showUploadDialog = true;
        StateHasChanged();
    }

    private void CloseUploadDialog()
    {
        showUploadDialog = false;
        selectedFiles.Clear();
        uploadProgress.Clear();
        fileUpload?.ClearFiles();
        StateHasChanged();
    }

    private async Task UploadFiles()
    {
        if (!selectedFiles.Any() || isUploading) return;

        var videoFiles = selectedFiles.Where(f => f.ContentType.StartsWith("video/")).ToList();
        if (!videoFiles.Any())
        {
            NotificationService.ShowWarning("Please select at least one video file");
            return;
        }

        try
        {
            isUploading = true;
            StateHasChanged();

            var uploadTasks = videoFiles.Select(async file =>
            {
                try
                {
                    using var memoryStream = new MemoryStream();
                    await file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024).CopyToAsync(memoryStream); // 100MB limit
                    memoryStream.Position = 0;

                    var formFile = new FormFile(memoryStream, 0, memoryStream.Length, file.Name, file.Name)
                    {
                        Headers = new HeaderDictionary(),
                        ContentType = file.ContentType
                    };

                    var uploadDto = new FileUploadDto
                    {
                        File = formFile,
                        FolderId = GetCurrentFolderId(),
                        IsPublic = false,
                        GenerateThumbnail = false // Videos don't need thumbnails for now
                    };

                    return await FileService.UploadFileAsync(uploadDto);
                }
                catch (Exception ex)
                {
                    NotificationService.ShowError($"Failed to upload {file.Name}: {ex.Message}");
                    return null;
                }
            });

            var results = await Task.WhenAll(uploadTasks);
            var successCount = results.Count(r => r != null);

            if (successCount > 0)
            {
                NotificationService.ShowSuccess($"Successfully uploaded {successCount} video(s)");
                CloseUploadDialog();

                // Force immediate refresh
                isUploading = false;
                StateHasChanged();
                await ForceRefreshData();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to upload videos: {ex.Message}");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
    private async Task ForceRefreshData()
    {
        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to refresh data: {ex.Message}");
        }
    }
    private Task OnFilesChanged(List<IBrowserFile> files)
    {
        selectedFiles = files;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnUploadProgressChanged(Dictionary<string, int> progress)
    {
        uploadProgress = progress;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Helper methods
    private int? GetCurrentFolderId()
    {
        if (!string.IsNullOrEmpty(selectedFolderId) && int.TryParse(selectedFolderId, out var folderId))
        {
            return folderId;
        }
        return null;
    }

    private string GetFullPath(FileDto file)
    {
        var path = "/";
        if (breadcrumbs.Any())
        {
            path = "/" + string.Join("/", breadcrumbs.Select(b => b.Name)) + "/";
        }
        return path + file.OriginalFileName;
    }

    private string GetFolderPath(FolderDto folder)
    {
        return "/" + folder.Path;
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
        {
            return duration.ToString(@"h\:mm\:ss");
        }
        return duration.ToString(@"m\:ss");
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}