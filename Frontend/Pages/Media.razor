@page "/media"
@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@using Frontend.Interface
@using Frontend.Interfaces
@inject IFileService FileService
@inject IFolderService FolderService
@inject INotificationService NotificationService
@inject IStyleService StyleService
@inject NavigationManager Navigation

<PageTitle>Media Library - CMS Designer</PageTitle>

<!-- Page Header -->
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 space-y-4 sm:space-y-0">
    <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
            <i class="fas fa-folder mr-3 text-blue-600 dark:text-blue-400"></i>
            Media Library
        </h1>
        <p class="text-gray-600 dark:text-gray-400 mt-1">Overview of your media files and folders</p>
    </div>
    <div class="flex items-center space-x-3">
<button @onclick="@(() => Navigation.NavigateTo("/media/folders"))"
        class="@StyleService.GetButtonClass("secondary")">
    <i class="fas fa-folder-plus mr-2"></i>
    Manage Folders
</button>
    </div>
</div>

<!-- Stats Overview -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    @foreach (var stat in statsCards)
    {
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 hover:shadow-md transition-shadow cursor-pointer"
             @onclick="() => Navigation.NavigateTo(stat.NavigateUrl)">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                        @stat.Name
                    </p>
                    <p class="text-2xl font-bold text-gray-900 dark:text-gray-100">
                        @stat.Count
                    </p>
                    <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                        @stat.SizeFormatted
                    </p>
                </div>
                <div class="@GetStatIconContainerClass(stat.Color)">
                    <i class="@stat.Icon @GetStatIconClass(stat.Color) text-xl"></i>
                </div>
            </div>
        </div>
    }
</div>

<!-- Quick Actions -->
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden mb-8">
    <div class="p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
            Quick Actions
        </h2>
        <p class="text-gray-600 dark:text-gray-400 mt-1">
            Manage your media files and folders
        </p>
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-1">
        @foreach (var action in quickActions)
        {
            <button @onclick="@(() => Navigation.NavigateTo(action.NavigateUrl))" 
                    class="group p-6 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors text-left">
                <div class="flex items-center">
                    <div class="@GetActionIconContainerClass(action.Color)">
                        <i class="@action.Icon @GetActionIconClass(action.Color) text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="font-medium text-gray-900 dark:text-gray-100">
                            @action.Name
                        </h3>
                        <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                            @action.Description
                        </p>
                    </div>
                </div>
            </button>
        }
    </div>
</div>

<!-- Recent Files -->
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700">
    <div class="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center">
        <div>
            <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
                Recent Files
            </h2>
            <p class="text-gray-600 dark:text-gray-400 mt-1">
                Your latest uploaded files
            </p>
        </div>
        <button @onclick="RefreshData" 
                class="@StyleService.GetButtonClass("secondary", "small")"
                disabled="@isLoading">
            <i class="fas fa-refresh @(isLoading ? "fa-spin" : "") mr-2"></i>
            Refresh
        </button>
    </div>
    <div class="divide-y divide-gray-200 dark:divide-gray-700">
        @if (isLoading)
        {
            @for (int i = 0; i < 5; i++)
            {
                <div class="p-6 animate-pulse">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-lg"></div>
                        <div class="flex-1">
                            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
                            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                        </div>
                    </div>
                </div>
            }
        }
        else if (recentFiles.Any())
        {
            @foreach (var file in recentFiles.Take(10))
            {
                <div class="p-6 hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-700 flex items-center justify-center">
                                @if (file.FileType == FileType.Image)
                                {
                                    <img src="/api/file/@(file.Id)/thumbnail"
                                         alt="@(file.Alt ?? file.OriginalFileName)"
                                         class="w-12 h-12 object-cover"
                                         onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                    <div class="w-12 h-12 flex items-center justify-center" style="display: none;">
                                        <i class="@GetFileIcon(file.FileType) @GetFileTypeColor(file.FileType)"></i>
                                    </div>
                                }
                                else
                                {
                                    <i class="@GetFileIcon(file.FileType) @GetFileTypeColor(file.FileType) text-xl"></i>
                                }
                            </div>
                            <div class="flex-1">
                                <h3 class="font-medium text-gray-900 dark:text-gray-100">
                                    @file.OriginalFileName
                                </h3>
                                <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mt-1">
                                    <span class="inline-flex items-center">
                                        <i class="@GetFileIcon(file.FileType) mr-1"></i>
                                        @file.FileType
                                    </span>
                                    <span>@FormatFileSize(file.FileSize)</span>
                                    <span>@file.CreatedAt.ToString("MMM dd, yyyy")</span>
                                </div>
                            </div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button @onclick="() => NavigateToFileType(file.FileType)" 
                                    class="@StyleService.GetTableActionButtonClass("view")"
                                    title="View in @file.FileType section">
                                <i class="fas fa-external-link-alt"></i>
                            </button>
                            <button @onclick="() => DownloadFile(file)"
                                    class="@StyleService.GetTableActionButtonClass()"
                                    title="Download">
                                <i class="fas fa-download"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="p-12 text-center">
                <div class="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                    <i class="fas fa-file text-gray-400 text-xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                    No files yet
                </h3>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                    Start by uploading your first file to the media library.
                </p>
                <button @onclick="@(() => Navigation.NavigateTo("/media/pictures"))"
                        class="@StyleService.GetButtonClass("primary")">
                    <i class="fas fa-upload mr-2"></i>
                    Upload Files
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<StatCard> statsCards = new();
    private List<QuickAction> quickActions = new();
    private List<FileDto> recentFiles = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        InitializeQuickActions();
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load stats for each file type
            var allFiles = await FileService.GetFilesAsync(1, 1000, null, null, null);
            var folders = await FolderService.GetFoldersAsync(null);

            // Calculate stats
            var imageCount = allFiles.Items.Count(f => f.FileType == FileType.Image);
            var videoCount = allFiles.Items.Count(f => f.FileType == FileType.Video);
            var audioCount = allFiles.Items.Count(f => f.FileType == FileType.Audio);
            var documentCount = allFiles.Items.Count(f => f.FileType == FileType.Document);

            var imageSize = allFiles.Items.Where(f => f.FileType == FileType.Image).Sum(f => f.FileSize);
            var videoSize = allFiles.Items.Where(f => f.FileType == FileType.Video).Sum(f => f.FileSize);
            var audioSize = allFiles.Items.Where(f => f.FileType == FileType.Audio).Sum(f => f.FileSize);
            var documentSize = allFiles.Items.Where(f => f.FileType == FileType.Document).Sum(f => f.FileSize);

            statsCards = new List<StatCard>
            {
                new StatCard 
                { 
                    Name = "Folders", 
                    Count = folders.Count.ToString(), 
                    SizeFormatted = "Organized",
                    Icon = "fas fa-folder", 
                    Color = "blue",
                    NavigateUrl = "/media/folders"
                },
                new StatCard 
                { 
                    Name = "Pictures", 
                    Count = imageCount.ToString(), 
                    SizeFormatted = FormatFileSize(imageSize),
                    Icon = "fas fa-images", 
                    Color = "green",
                    NavigateUrl = "/media/pictures"
                },
                new StatCard 
                { 
                    Name = "Videos", 
                    Count = videoCount.ToString(), 
                    SizeFormatted = FormatFileSize(videoSize),
                    Icon = "fas fa-video", 
                    Color = "blue",
                    NavigateUrl = "/media/videos"
                },
                new StatCard 
                { 
                    Name = "Audio", 
                    Count = audioCount.ToString(), 
                    SizeFormatted = FormatFileSize(audioSize),
                    Icon = "fas fa-music", 
                    Color = "purple",
                    NavigateUrl = "/media/audio"
                }
            };

            // Get recent files
            recentFiles = allFiles.Items.OrderByDescending(f => f.CreatedAt).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to load media overview: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeQuickActions()
    {
        quickActions = new List<QuickAction>
        {
            new QuickAction 
            { 
                Name = "Manage Folders", 
                Description = "Organize your files with folders",
                Icon = "fas fa-folder-plus", 
                Color = "blue",
                NavigateUrl = "/media/folders"
            },
            new QuickAction 
            { 
                Name = "Upload Pictures", 
                Description = "Add new images to your library",
                Icon = "fas fa-images", 
                Color = "green",
                NavigateUrl = "/media/pictures"
            },
            new QuickAction 
            { 
                Name = "Upload Videos", 
                Description = "Add video content to your site",
                Icon = "fas fa-video", 
                Color = "blue",
                NavigateUrl = "/media/videos"
            },
            new QuickAction 
            { 
                Name = "Upload Audio", 
                Description = "Add music and sound files",
                Icon = "fas fa-music", 
                Color = "purple",
                NavigateUrl = "/media/audio"
            },
            new QuickAction 
            { 
                Name = "Upload Documents", 
                Description = "Add PDFs and other documents",
                Icon = "fas fa-file-alt", 
                Color = "red",
                NavigateUrl = "/media/documents"
            },
            new QuickAction 
            { 
                Name = "View All Files", 
                Description = "Browse all media in one place",
                Icon = "fas fa-th-large", 
                Color = "gray",
                NavigateUrl = "/media/pictures"
            }
        };
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }

    private void NavigateToFileType(FileType fileType)
    {
        var url = fileType switch
        {
            FileType.Image => "/media/pictures",
            FileType.Video => "/media/videos",
            FileType.Audio => "/media/audio",
            FileType.Document => "/media/documents",
            _ => "/media/pictures"
        };
        Navigation.NavigateTo(url);
    }

    private async Task DownloadFile(FileDto file)
    {
        try
        {
            await FileService.DownloadFileAsync(file.Id);
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to download file: {ex.Message}");
        }
    }

    // Helper methods for styling
    private string GetStatIconContainerClass(string color)
    {
        return $"p-3 rounded-xl bg-{color}-100 dark:bg-{color}-900/30";
    }

    private string GetStatIconClass(string color)
    {
        return $"text-{color}-600 dark:text-{color}-400";
    }

    private string GetActionIconContainerClass(string color)
    {
        return $"inline-flex p-4 rounded-xl bg-{color}-100 dark:bg-{color}-900/30 group-hover:bg-{color}-200 dark:group-hover:bg-{color}-800/50 transition-colors";
    }

    private string GetActionIconClass(string color)
    {
        return $"text-{color}-600 dark:text-{color}-400";
    }

    private string GetFileIcon(FileType fileType)
    {
        return fileType switch
        {
            FileType.Image => "fas fa-image",
            FileType.Video => "fas fa-video",
            FileType.Audio => "fas fa-music",
            FileType.Document => "fas fa-file-alt",
            FileType.Archive => "fas fa-file-archive",
            _ => "fas fa-file"
        };
    }

    private string GetFileTypeColor(FileType fileType)
    {
        return fileType switch
        {
            FileType.Image => "text-green-600 dark:text-green-400",
            FileType.Video => "text-blue-600 dark:text-blue-400",
            FileType.Audio => "text-purple-600 dark:text-purple-400",
            FileType.Document => "text-red-600 dark:text-red-400",
            FileType.Archive => "text-yellow-600 dark:text-yellow-400",
            _ => "text-gray-600 dark:text-gray-400"
        };
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 B";
        
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    // Data Models
    private class StatCard
    {
        public string Name { get; set; } = string.Empty;
        public string Count { get; set; } = string.Empty;
        public string SizeFormatted { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
        public string NavigateUrl { get; set; } = string.Empty;
    }

    private class QuickAction
    {
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
        public string NavigateUrl { get; set; } = string.Empty;
    }
}