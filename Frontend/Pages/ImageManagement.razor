@page "/media/pictures"
@using Backend.CMS.Application.DTOs
@using Backend.CMS.Domain.Enums
@using Frontend.Interface
@using Frontend.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Internal
@inject IFileService FileService
@inject IFolderService FolderService
@inject INotificationService NotificationService
@inject IStyleService StyleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Pictures - Media Library</PageTitle>

<div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Page Header -->
    <div class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
        <div class="mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between py-6 space-y-4 sm:space-y-0">
                <div>
                    <div class="flex items-center">
                        <div class="w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-lg flex items-center justify-center mr-4">
                            <i class="fas fa-images text-white text-lg"></i>
                        </div>
                        <div>
                            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Pictures</h1>
                            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                                Manage your image collection
                                @if (files.TotalCount > 0)
                                {
                                    <span class="ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300">
                                        @files.TotalCount total
                                    </span>
                                }
                            </p>
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-3">
                    <button @onclick="ShowUploadDialog"
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200">
                        <i class="fas fa-upload mr-2"></i>
                        Upload Pictures
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <!-- Breadcrumbs -->
        @if (breadcrumbs.Any())
        {
            <div class="mb-6">
                <nav class="flex items-center space-x-2 text-sm bg-white dark:bg-gray-800 rounded-lg px-4 py-3 border border-gray-200 dark:border-gray-700 shadow-sm">
                    <button @onclick="() => NavigateToFolder(null)"
                            class="inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/20 px-2 py-1 rounded transition-colors">
                        <i class="fas fa-home mr-1"></i>
                        Root
                    </button>
                    @foreach (var folder in breadcrumbs)
                    {
                        <i class="fas fa-chevron-right text-gray-400 mx-2"></i>
                        <button @onclick="() => NavigateToFolder(folder.Id)"
                                class="inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:bg-blue-50 dark:hover:bg-blue-900/20 px-2 py-1 rounded transition-colors">
                            @folder.Name
                        </button>
                    }
                </nav>
            </div>
        }

        <!-- Search and Filters -->
        <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden mb-6">
            <div class="p-6">
                <div class="flex flex-col lg:flex-row gap-4">
                    <!-- Search -->
                    <div class="flex-1">
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <i class="fas fa-search text-gray-400"></i>
                            </div>
                            <input @bind="searchTerm"
                                   @bind:event="oninput"
                                   @onkeyup="OnSearchKeyUp"
                                   type="text"
                                   placeholder="Search pictures by name, description, or tags..."
                                   class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-green-500 focus:border-green-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 sm:text-sm" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button @onclick="ClearSearch"
                                        class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Filters and Controls -->
                    <div class="flex items-center space-x-3">
                        <!-- Folder Filter -->
                        <select @bind="selectedFolderId"
                                @bind:after="OnFolderChange"
                                class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-green-500 focus:border-green-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 sm:text-sm rounded-md">
                            <option value="">All Folders</option>
                            @foreach (var folder in allFolders)
                            {
                                <option value="@folder.Id">@GetFolderDisplayPath(folder)</option>
                            }
                        </select>

                        <!-- View Mode Toggle -->
                        <div class="inline-flex rounded-lg shadow-sm" role="group">
                            <button @onclick="() => SetViewMode(ViewMode.Grid)"
                                    type="button"
                                    class="@StyleService.GetViewToggleClass(currentViewMode == ViewMode.Grid, true)">
                                <i class="fas fa-th mr-1"></i>
                                Grid
                            </button>
                            <button @onclick="() => SetViewMode(ViewMode.List)"
                                    type="button"
                                    class="@StyleService.GetViewToggleClass(currentViewMode == ViewMode.List, false)">
                                <i class="fas fa-list mr-1"></i>
                                List
                            </button>
                        </div>

                        <!-- Refresh Button -->
                        <button @onclick="RefreshData"
                                class="inline-flex items-center p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors duration-200"
                                title="Refresh"
                                disabled="@isLoading">
                            <i class="fas fa-refresh @(isLoading ? "fa-spin" : "") text-sm"></i>
                        </button>
                    </div>
                </div>

                <!-- Results Summary -->
                @if (!isLoading && (files.Data?.Any() == true || !string.IsNullOrEmpty(searchTerm)))
                {
                    <div class="mt-4 flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
                        <div>
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <span>
                                    Found <strong class="text-gray-900 dark:text-gray-100">@files.TotalCount</strong> pictures matching
                                    <strong class="text-gray-900 dark:text-gray-100">"@searchTerm"</strong>
                                </span>
                            }
                            else
                            {
                                <span>
                                    Showing <strong class="text-gray-900 dark:text-gray-100">@files.Data?.Count()</strong> of
                                    <strong class="text-gray-900 dark:text-gray-100">@files.TotalCount</strong> pictures
                                    @if (GetCurrentFolderId().HasValue)
                                    {
                                        <span> in current folder</span>
                                    }
                                </span>
                            }
                        </div>
                        @if (files.TotalCount > 0)
                        {
                            <div class="text-xs text-gray-500 dark:text-gray-400">
                                Page @currentPage of @totalPages
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Content Area -->
        <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
            @if (isLoading)
            {
                <div class="p-6">
                    <div class="flex items-center justify-center py-12">
                        <div class="text-center">
                            <div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-gray-200 dark:border-gray-600 border-t-green-600 dark:border-t-green-400 mb-4"></div>
                            <p class="text-gray-500 dark:text-gray-400 text-lg font-medium">Loading pictures...</p>
                            <p class="text-gray-400 dark:text-gray-500 text-sm mt-1">Please wait while we fetch your images</p>
                        </div>
                    </div>
                </div>
            }
            else if (files.Data?.Any() == true)
            {
                @if (currentViewMode == ViewMode.Grid)
                {
                    <!-- Optimized Grid View -->
                    <div class="p-6">
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4">
                            @foreach (var file in files.Data)
                            {
                                <div class="group relative bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 overflow-hidden border border-gray-200 dark:border-gray-700">
                                    <!-- Image Container -->
                                    <div class="relative aspect-square bg-gray-100 dark:bg-gray-700 overflow-hidden cursor-pointer"
                                         @onclick="() => PreviewFile(file)">
                                        <img src="@FileService.GetThumbnailUrl(file.Id)"
                                             alt="@(file.Alt ?? file.OriginalFileName)"
                                             class="w-full h-full object-cover transition-transform duration-200 group-hover:scale-105"
                                             loading="lazy"
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />

                                        <!-- Fallback for failed images -->
                                        <div class="w-full h-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center" style="display: none;">
                                            <div class="text-center">
                                                <i class="fas fa-image text-gray-400 text-2xl mb-2"></i>
                                                <p class="text-gray-500 dark:text-gray-400 text-xs">Image unavailable</p>
                                            </div>
                                        </div>

                                        <!-- Image Info Overlay -->
                                        <div class="absolute top-2 left-2 flex space-x-1">
                                            @if (file.Width.HasValue && file.Height.HasValue)
                                            {
                                                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-black/70 text-white backdrop-blur-sm">
                                                    @file.Width×@file.Height
                                                </span>
                                            }
                                        </div>

                                        <!-- Visibility indicator -->
                                        <div class="absolute top-2 right-2">
                                            @if (file.IsPublic)
                                            {
                                                <span class="inline-flex items-center p-1.5 rounded-full bg-green-100/90 dark:bg-green-900/90 text-green-600 dark:text-green-400 backdrop-blur-sm" title="Public">
                                                    <i class="fas fa-globe text-xs"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="inline-flex items-center p-1.5 rounded-full bg-gray-100/90 dark:bg-gray-700/90 text-gray-600 dark:text-gray-400 backdrop-blur-sm" title="Private">
                                                    <i class="fas fa-lock text-xs"></i>
                                                </span>
                                            }
                                        </div>

                                        <!-- Actions overlay -->
                                        <div class="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center space-x-2">
                                            <button @onclick="() => PreviewFile(file)"
                                                    @onclick:stopPropagation="true"
                                                    class="p-2 bg-white/20 hover:bg-white/30 rounded-full text-white transition-colors backdrop-blur-sm"
                                                    title="Preview">
                                                <i class="fas fa-eye"></i>
                                            </button>

                                            <button @onclick="() => FileService.DownloadFileAsync(file.Id)"
                                                    @onclick:stopPropagation="true"
                                                    class="p-2 bg-white/20 hover:bg-white/30 rounded-full text-white transition-colors backdrop-blur-sm"
                                                    title="Download">
                                                <i class="fas fa-download"></i>
                                            </button>

                                            <button @onclick="() => ShowEditFileDialog(file)"
                                                    @onclick:stopPropagation="true"
                                                    class="p-2 bg-white/20 hover:bg-white/30 rounded-full text-white transition-colors backdrop-blur-sm"
                                                    title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>

                                            <button @onclick="() => ShowDeleteFileConfirmation(file)"
                                                    @onclick:stopPropagation="true"
                                                    class="p-2 bg-red-500/80 hover:bg-red-500 rounded-full text-white transition-colors backdrop-blur-sm"
                                                    title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <!-- File Info -->
                                    <div class="p-3">
                                        <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate mb-1" title="@file.OriginalFileName">
                                            @file.OriginalFileName
                                        </h4>

                                        <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 mb-2">
                                            <span>@file.FileSizeFormatted</span>
                                            <span>@file.CreatedAt.ToString("MMM dd")</span>
                                        </div>

                                        @if (!string.IsNullOrEmpty(file.Description))
                                        {
                                            <p class="text-xs text-gray-600 dark:text-gray-400 line-clamp-2 mb-2" title="@file.Description">
                                                @file.Description
                                            </p>
                                        }

                                        <!-- File path (compact) -->
                                        <div class="text-xs text-gray-400 dark:text-gray-500 font-mono truncate" title="@GetFullPath(file)">
                                            @GetCompactPath(file)
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <!-- Optimized List View -->
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                            <thead class="bg-gray-50 dark:bg-gray-900">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Picture</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Name</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Size</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Dimensions</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Path</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Modified</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider text-right">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                @foreach (var file in files.Data)
                                {
                                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="w-16 h-16 rounded-lg overflow-hidden shadow-sm cursor-pointer"
                                                 @onclick="() => PreviewFile(file)">
                                                <img src="@FileService.GetThumbnailUrl(file.Id)"
                                                     alt="@(file.Alt ?? file.OriginalFileName)"
                                                     class="w-full h-full object-cover hover:scale-105 transition-transform duration-200"
                                                     loading="lazy"
                                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                                <div class="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center" style="display: none;">
                                                    <i class="fas fa-image text-gray-400"></i>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900 dark:text-white">@file.OriginalFileName</div>
                                            <div class="text-sm text-gray-500 dark:text-gray-400">@file.FileExtension.ToUpper()</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                            @file.FileSizeFormatted
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                            @if (file.Width.HasValue && file.Height.HasValue)
                                            {
                                                <span>@file.Width × @file.Height px</span>
                                            }
                                            else
                                            {
                                                <span class="text-gray-400">—</span>
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 font-mono">
                                            <span title="@GetFullPath(file)">@GetCompactPath(file)</span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                            @file.UpdatedAt.ToString("MMM dd, yyyy HH:mm")
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 text-right">
                                            <div class="flex items-center justify-end space-x-2">
                                                <button @onclick="() => PreviewFile(file)"
                                                        class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 p-1 rounded hover:bg-green-50 dark:hover:bg-green-900/20 transition-colors"
                                                        title="Preview">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button @onclick="() => FileService.DownloadFileAsync(file.Id)"
                                                        class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors"
                                                        title="Download">
                                                    <i class="fas fa-download"></i>
                                                </button>
                                                <button @onclick="() => ShowEditFileDialog(file)"
                                                        class="text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300 p-1 rounded hover:bg-yellow-50 dark:hover:bg-yellow-900/20 transition-colors"
                                                        title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button @onclick="() => ShowDeleteFileConfirmation(file)"
                                                        class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 p-1 rounded hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
                                                        title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
            else
            {
                <!-- Enhanced Empty State -->
                <div class="p-6">
                    <div class="text-center py-12">
                        <div class="mx-auto w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-6">
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <i class="fas fa-search text-gray-400 text-2xl"></i>
                            }
                            else
                            {
                                <i class="fas fa-images text-gray-400 text-2xl"></i>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                                No pictures found matching "@searchTerm"
                            </h3>
                            <p class="text-gray-500 dark:text-gray-400 mb-6 max-w-sm mx-auto">
                                Try adjusting your search terms or browse all pictures instead.
                            </p>
                            <div class="flex flex-col sm:flex-row gap-3 justify-center">
                                <button @onclick="ClearSearch"
                                        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
                                    <i class="fas fa-times mr-2"></i>
                                    Clear Search
                                </button>
                                <button @onclick="ShowUploadDialog"
                                        class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition-colors">
                                    <i class="fas fa-upload mr-2"></i>
                                    Upload Pictures
                                </button>
                            </div>
                        }
                        else if (GetCurrentFolderId().HasValue)
                        {
                            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                                No pictures in this folder
                            </h3>
                            <p class="text-gray-500 dark:text-gray-400 mb-6 max-w-sm mx-auto">
                                This folder is empty. Upload some pictures to get started.
                            </p>
                            <button @onclick="ShowUploadDialog"
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition-colors">
                                <i class="fas fa-upload mr-2"></i>
                                Upload Pictures
                            </button>
                        }
                        else
                        {
                            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                                Welcome to your picture library
                            </h3>
                            <p class="text-gray-500 dark:text-gray-400 mb-6 max-w-sm mx-auto">
                                Get started by uploading your first pictures. You can organize them into folders and manage them easily.
                            </p>
                            <button @onclick="ShowUploadDialog"
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition-colors">
                                <i class="fas fa-upload mr-2"></i>
                                Upload Your First Pictures
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (files.TotalCount > 0 && totalPages > 1)
        {
            <div class="mt-6">
                <Pagination CurrentPage="@currentPage"
                            TotalPages="@totalPages"
                            TotalItems="@files.TotalCount"
                            OnPageChanged="@OnPageChanged"
                            IsLoading="@isLoading" />
            </div>
        }
    </div>
</div>

<!-- Edit File Dialog -->
<FormDialog @ref="fileDialog"
            Title="Edit Picture"
            Description="Update picture information and metadata"
            HeaderIcon="fas fa-edit"
            IsVisible="@showFileDialog"
            IsSaving="@isSaving"
            Size="large"
            Model="@fileModel"
            ValidationErrors="@fileValidationErrors"
            IsEditMode="true"
            OnClose="@CloseFileDialog"
            OnSave="@SaveFile"
            CloseOnBackdrop="false">

    <FormContent Context="context">
        <FileEditForm Model="@((UpdateFileDto)context.Model)"
                      ValidationErrors="@context.ValidationErrors"
                      OriginalFile="@selectedFile"
                      FolderPath="@breadcrumbs" />
    </FormContent>
</FormDialog>

<!-- Upload Files Dialog -->
<GenericDialog @ref="uploadDialog"
               Title="Upload Pictures"
               Description="Upload new picture files to your library"
               HeaderIcon="fas fa-upload"
               IsVisible="@showUploadDialog"
               OnClose="@CloseUploadDialog"
               OnSave="@UploadFiles"
               IsSaving="@isUploading"
               SaveText="Upload"
               SavingText="Uploading..."
               Size="large">

    <BodyContent>
        <FileUpload @ref="fileUpload"
                    Files="@selectedFiles"
                    FilesChanged="@OnFilesChanged"
                    UploadProgress="@uploadProgress"
                    UploadProgressChanged="@OnUploadProgressChanged"
                    IsUploading="@isUploading"
                    FolderId="@GetCurrentFolderId()" />
    </BodyContent>
</GenericDialog>

<!-- File Preview Dialog -->
<FilePreview @ref="filePreview" />

<!-- Delete Confirmation -->
<ConfirmationDialog @ref="deleteFileDialog"
                    Title="Delete Picture"
                    Message="Are you sure you want to delete this picture? This action cannot be undone."
                    ConfirmText="Delete"
                    ConfirmClass="bg-red-600 hover:bg-red-700 focus:ring-red-500"
                    ConfirmIcon="fas fa-trash"
                    OnConfirm="@DeleteFile" />

@code {
    public enum ViewMode { Grid, List }

    // Data
    private PagedResult<FileDto> files = new();
    private List<FolderDto> allFolders = new();
    private List<FolderDto> breadcrumbs = new();
    private string selectedFolderId = string.Empty;

    // Loading states
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isUploading = false;
    private bool hasLoadedFolders = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 24; // Better for grid layout
    private int totalPages = 0;

    // Filters and search
    private string searchTerm = string.Empty;
    private Timer? searchTimer;
    private ViewMode currentViewMode = ViewMode.Grid;

    // Dialog states
    private bool showFileDialog = false;
    private bool showUploadDialog = false;
    private FileDto? selectedFile = null;

    // Form models and validation
    private UpdateFileDto fileModel = new();
    private Dictionary<string, string> fileValidationErrors = new();

    // Upload
    private List<IBrowserFile> selectedFiles = new();
    private Dictionary<string, int> uploadProgress = new();

    // Component references
    private FormDialog? fileDialog;
    private GenericDialog? uploadDialog;
    private ConfirmationDialog? deleteFileDialog;
    private FileUpload? fileUpload;
    private FilePreview? filePreview;

    // Performance optimization
    private readonly SemaphoreSlim loadingSemaphore = new(1, 1);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Parse URL parameters
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            selectedFolderId = query["folderId"] ?? string.Empty;

            // Load data in parallel where possible
            await Task.WhenAll(
                LoadFoldersAsync(),
                LoadDataAsync()
            );
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to initialize page: {ex.Message}");
        }
    }
    
    private async Task LoadFoldersAsync()
    {
        if (hasLoadedFolders) return;

        try
        {
            allFolders = await GetAllFoldersFlat();
            hasLoadedFolders = true;
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to load folders: {ex.Message}");
            allFolders = new List<FolderDto>();
        }
    }
    private async Task<List<FolderDto>> GetAllFoldersFlat()
    {
        try
        {
            var folders = await FolderService.GetFoldersAsync(null);
            var result = new List<FolderDto>();

            // Build flat list with paths
            BuildFlatFolderList(folders, result, "");

            return result.OrderBy(f => f.Path).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to load folder structure: {ex.Message}");
            return new List<FolderDto>();
        }
    }
    
    private async Task LoadDataAsync()
    {
        // Force reload - don't use semaphore timeout for critical updates
        await loadingSemaphore.WaitAsync();

        try
        {
            isLoading = true;
            StateHasChanged();

            int? folderId = null;
            if (!string.IsNullOrEmpty(selectedFolderId) && int.TryParse(selectedFolderId, out var folderIdInt))
            {
                folderId = folderIdInt;
            }

            // Load files and breadcrumbs in parallel
            var fileTask = FileService.GetFilesAsync(currentPage, pageSize, folderId,
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm, FileType.Image);

            var breadcrumbTask = folderId.HasValue
                ? FolderService.GetFolderBreadcrumbsAsync(folderId.Value)
                : Task.FromResult(new List<FolderDto>());

            await Task.WhenAll(fileTask, breadcrumbTask);

            files = await fileTask;
            breadcrumbs = await breadcrumbTask;

            totalPages = (int)Math.Ceiling((double)files.TotalCount / pageSize);
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to load pictures: {ex.Message}");
            files = new PagedResult<FileDto>();
            breadcrumbs = new List<FolderDto>();
        }
        finally
        {
            isLoading = false;
            loadingSemaphore.Release();
            StateHasChanged();
        }
    }
    

    private void BuildFlatFolderList(List<FolderDto> folders, List<FolderDto> result, string parentPath)
    {
        foreach (var folder in folders)
        {
            var currentPath = string.IsNullOrEmpty(parentPath) ? folder.Name : $"{parentPath}/{folder.Name}";

            result.Add(new FolderDto
            {
                Id = folder.Id,
                Name = folder.Name,
                Path = currentPath,
                Description = folder.Description,
                ParentFolderId = folder.ParentFolderId
            });

            if (folder.SubFolders?.Any() == true)
            {
                BuildFlatFolderList(folder.SubFolders, result, currentPath);
            }
        }
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            currentPage = 1;
            await InvokeAsync(LoadDataAsync);
        }, null, 300, Timeout.Infinite); // Reduced debounce time
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        currentPage = 1;
        _ = LoadDataAsync();
    }

    private async Task OnFolderChange()
    {
        currentPage = 1;

        // Update URL
        var url = "/media/pictures";
        if (!string.IsNullOrEmpty(selectedFolderId))
        {
            url += $"?folderId={selectedFolderId}";
        }
        Navigation.NavigateTo(url, false);

        await LoadDataAsync();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadDataAsync();
    }

    private async Task RefreshData()
    {
        hasLoadedFolders = false; // Force folder reload
        await Task.WhenAll(
            LoadFoldersAsync(),
            LoadDataAsync()
        );
    }

    private void SetViewMode(ViewMode mode)
    {
        currentViewMode = mode;
        StateHasChanged();
    }

    private async Task NavigateToFolder(int? folderId)
    {
        selectedFolderId = folderId?.ToString() ?? string.Empty;
        currentPage = 1;

        var url = "/media/pictures";
        if (folderId.HasValue)
        {
            url += $"?folderId={folderId}";
        }
        Navigation.NavigateTo(url, false);

        await LoadDataAsync();
    }

    // File Management
    private async Task ShowEditFileDialog(FileDto file)
    {
        selectedFile = file;
        fileModel = new UpdateFileDto
        {
            Description = file.Description,
            Alt = file.Alt,
            IsPublic = file.IsPublic,
            FolderId = file.FolderId,
            Tags = file.Tags ?? new Dictionary<string, object>()
        };
        fileValidationErrors.Clear();
        showFileDialog = true;
        StateHasChanged();
    }

    private void CloseFileDialog()
    {
        showFileDialog = false;
        fileModel = new UpdateFileDto();
        selectedFile = null;
        fileValidationErrors.Clear();
        StateHasChanged();
    }

    private async Task SaveFile()
    {
        if (isSaving || selectedFile == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            await FileService.UpdateFileAsync(selectedFile.Id, fileModel);
            NotificationService.ShowSuccess("Picture updated successfully");

            CloseFileDialog();

            // Force immediate refresh
            isSaving = false;
            StateHasChanged();
            await ForceRefreshData();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to save picture: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowDeleteFileConfirmation(FileDto file)
    {
        selectedFile = file;
        deleteFileDialog?.Show();
    }

    private async Task DeleteFile()
    {
        if (selectedFile == null) return;

        try
        {
            await FileService.DeleteFileAsync(selectedFile.Id);
            NotificationService.ShowSuccess("Picture deleted successfully");

            // Force immediate refresh
            await ForceRefreshData();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to delete picture: {ex.Message}");
        }
    }

    private async Task PreviewFile(FileDto file)
    {
        filePreview?.ShowPreview(file);
    }



    // Upload Management
    private void ShowUploadDialog()
    {
        selectedFiles.Clear();
        uploadProgress.Clear();
        showUploadDialog = true;
        StateHasChanged();
    }

    private void CloseUploadDialog()
    {
        showUploadDialog = false;
        selectedFiles.Clear();
        uploadProgress.Clear();
        fileUpload?.ClearFiles();
        StateHasChanged();
    }

    private async Task UploadFiles()
    {
        if (!selectedFiles.Any() || isUploading) return;

        var imageFiles = selectedFiles.Where(f => f.ContentType.StartsWith("image/")).ToList();
        if (!imageFiles.Any())
        {
            NotificationService.ShowWarning("Please select at least one image file");
            return;
        }

        try
        {
            isUploading = true;
            StateHasChanged();

            var uploadTasks = imageFiles.Select(async file =>
            {
                try
                {
                    using var memoryStream = new MemoryStream();
                    await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);
                    memoryStream.Position = 0;

                    var formFile = new FormFile(memoryStream, 0, memoryStream.Length, file.Name, file.Name)
                    {
                        Headers = new HeaderDictionary(),
                        ContentType = file.ContentType
                    };

                    var uploadDto = new FileUploadDto
                    {
                        File = formFile,
                        FolderId = GetCurrentFolderId(),
                        IsPublic = false,
                        GenerateThumbnail = true
                    };

                    return await FileService.UploadFileAsync(uploadDto);
                }
                catch (Exception ex)
                {
                    NotificationService.ShowError($"Failed to upload {file.Name}: {ex.Message}");
                    return null;
                }
            });

            var results = await Task.WhenAll(uploadTasks);
            var successCount = results.Count(r => r != null);

            if (successCount > 0)
            {
                NotificationService.ShowSuccess($"Successfully uploaded {successCount} picture(s)");
                CloseUploadDialog();

                // Force immediate refresh
                isUploading = false;
                StateHasChanged();
                await ForceRefreshData();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to upload pictures: {ex.Message}");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
    private async Task ForceRefreshData()
    {
        try
        {
            // Force a complete data reload
            hasLoadedFolders = false;
            await Task.WhenAll(
                LoadFoldersAsync(),
                LoadDataAsync()
            );
        }
        catch (Exception ex)
        {
            NotificationService.ShowError($"Failed to refresh data: {ex.Message}");
        }
    }
    private Task OnFilesChanged(List<IBrowserFile> files)
    {
        selectedFiles = files;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnUploadProgressChanged(Dictionary<string, int> progress)
    {
        uploadProgress = progress;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Helper methods
    private int? GetCurrentFolderId()
    {
        if (!string.IsNullOrEmpty(selectedFolderId) && int.TryParse(selectedFolderId, out var folderId))
        {
            return folderId;
        }
        return null;
    }

    private string GetFullPath(FileDto file)
    {
        if (breadcrumbs.Any())
        {
            return "/" + string.Join("/", breadcrumbs.Select(b => b.Name)) + "/" + file.OriginalFileName;
        }
        return "/" + file.OriginalFileName;
    }

    private string GetCompactPath(FileDto file)
    {
        var fullPath = GetFullPath(file);
        if (fullPath.Length <= 40) return fullPath;

        var parts = fullPath.Split('/').Where(p => !string.IsNullOrEmpty(p)).ToArray();
        if (parts.Length <= 2) return fullPath;

        return "/" + parts[0] + "/.../" + parts[^1];
    }

    private string GetFolderDisplayPath(FolderDto folder)
    {
        return "/" + folder.Path;
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
        loadingSemaphore?.Dispose();
    }
}